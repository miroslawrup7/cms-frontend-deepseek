{"version":3,"file":"admin.js","names":["API_BASE","toast","toastError","confirmToast","escapeHTML","str","replace","async","loadPendingUsers","table","document","getElementById","tbody","console","log","innerHTML","res","fetch","credentials","data","json","ok","Error","message","status","renderTable","users","err","error","Array","isArray","length","map","user","createdAt","Date","toLocaleString","year","month","day","hour","minute","hour12","_id","username","email","role","join","addEventListener","e","row","target","closest","id","dataset","classList","contains","okText","cancelText","method","remove"],"sources":["admin.js"],"mappings":"OAASA,aAAgB,kBAChBC,MAAOC,WAAYC,iBAAoB,aAEhD,SAASC,WAAWC,GAClB,OAAKA,EACEA,EAAIC,QAAQ,KAAM,SACfA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,SALP,EAMnB,CAEAC,eAAeC,mBACb,MAAMC,EAAQC,SAASC,eAAe,gBAChCC,EAAQF,SAASC,eAAe,eAEtC,GADAE,QAAQC,IAAI,iCAAkCL,EAAO,iBAAkBG,GAClEH,GAAUG,EAAf,CAKAA,EAAMG,UAAY,2CAElB,IACEF,QAAQC,IAAI,kBAAkBd,oCAC9B,MAAMgB,QAAYC,MAAM,GAAGjB,mCAAoC,CAC7DkB,YAAa,YAETC,QAAaH,EAAII,OAEvB,GADAP,QAAQC,IAAI,mBAAoBK,IAC3BH,EAAIK,GAAI,MAAM,IAAIC,MAAMH,GAAMI,SAAW,QAAQP,EAAIQ,UAE1DC,YAAYN,EAAKO,OAAS,GAC5B,CAAE,MAAOC,GACPd,QAAQe,MAAM,+BAAgCD,GAC9Cf,EAAMG,UAAY,mFAClBb,WAAWyB,EAAIJ,SAAW,sCAC5B,CAlBA,MAFEV,QAAQe,MAAM,oCAAqCnB,EAAO,eAAgBG,EAqB9E,CAEA,SAASa,YAAYC,GACnB,MAAMd,EAAQF,SAASC,eAAe,eACjCC,IAEAiB,MAAMC,QAAQJ,IAA2B,IAAjBA,EAAMK,OAKnCnB,EAAMG,UAAYW,EAAMM,IAAIC,IAE1B,MAAMC,EAAYD,EAAKC,UACnB,IAAIC,KAAKF,EAAKC,WAAWE,eAAe,QAAS,CAC/CC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IACPpC,QAAQ,IAAK,IAAIA,QAAQ,4BAA6B,YACzD,IACJ,MAAO,wBACU2B,EAAKU,sBACZvC,WAAW6B,EAAKW,+BAChBxC,WAAW6B,EAAKY,4BAChBzC,WAAW6B,EAAKa,wFAEhBZ,iNAOTa,KAAK,IA7BNnC,EAAMG,UAAY,mEA8BtB,CAEAL,SAASC,eAAe,iBAAiBqC,iBAAiB,QAASzC,MAAO0C,IACxE,MAAMC,EAAMD,EAAEE,OAAOC,QAAQ,eAC7B,IAAKF,EAAK,OACV,MAAMG,EAAKH,EAAII,QAAQD,GAEvB,GAAIJ,EAAEE,OAAOI,UAAUC,SAAS,oBAAqB,CAMnD,UALiBrD,aAAa,CAC5BoB,QAAS,gCACTkC,OAAQ,YACRC,WAAY,WAEL,OAET,IACE,MAAM1C,QAAYC,MAAM,GAAGjB,8BAA8BqD,IAAM,CAC7DM,OAAQ,OACRzC,YAAa,YAETC,QAAaH,EAAII,OACvB,IAAKJ,EAAIK,GAAI,MAAM,IAAIC,MAAMH,GAAMI,SAAW,QAAQP,EAAIQ,UAC1D0B,EAAIU,SACJ3D,MAAM,2BAA4B,UACpC,CAAE,MAAO0B,GACPzB,WAAWyB,EAAIJ,SAAW,kCAC5B,CACA,MACF,CAEA,GAAI0B,EAAEE,OAAOI,UAAUC,SAAS,mBAAoB,CAMlD,UALiBrD,aAAa,CAC5BoB,QAAS,6BACTkC,OAAQ,SACRC,WAAY,WAEL,OAET,IACE,MAAM1C,QAAYC,MAAM,GAAGjB,6BAA6BqD,IAAM,CAC5DM,OAAQ,SACRzC,YAAa,YAETC,QAAaH,EAAII,OACvB,IAAKJ,EAAIK,GAAI,MAAM,IAAIC,MAAMH,GAAMI,SAAW,QAAQP,EAAIQ,UAC1D0B,EAAIU,SACJ3D,MAAM,wBAAyB,UACjC,CAAE,MAAO0B,GACPzB,WAAWyB,EAAIJ,SAAW,+BAC5B,CACF,IAGFb,SAASsC,iBAAiB,mBAAoB,KAC5CnC,QAAQC,IAAI,sCACZD,QAAQC,IAAI,gBAAiBJ,SAASC,eAAe,iBACrDE,QAAQC,IAAI,eAAgBJ,SAASC,eAAe,gBACpDH","ignoreList":[],"sourcesContent":["import { API_BASE } from './api.js'\r\nimport { toast, toastError, confirmToast } from './toast.js'\r\n\r\nfunction escapeHTML(str) {\r\n  if (!str) return ''\r\n  return str.replace(/&/g, '&amp;')\r\n           .replace(/</g, '&lt;')\r\n           .replace(/>/g, '&gt;')\r\n           .replace(/\"/g, '&quot;')\r\n           .replace(/'/g, '&#39;')\r\n}\r\n\r\nasync function loadPendingUsers() {\r\n  const table = document.getElementById('pendingTable')\r\n  const tbody = document.getElementById('pendingBody')\r\n  console.log('Sprawdzam DOM: pendingTable=', !!table, 'pendingBody=', !!tbody)\r\n  if (!table || !tbody) {\r\n    console.error('Brak elementów DOM: pendingTable=', table, 'pendingBody=', tbody)\r\n    return\r\n  }\r\n\r\n  tbody.innerHTML = '<tr><td colspan=\"5\">Ładowanie…</td></tr>'\r\n\r\n  try {\r\n    console.log(`Wysyłam fetch: ${API_BASE}/api/admin/pending-users`)\r\n    const res = await fetch(`${API_BASE}/api/admin/pending-users`, {\r\n      credentials: 'include'\r\n    })\r\n    const data = await res.json()\r\n    console.log('Odpowiedź z API:', data)\r\n    if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)\r\n    \r\n    renderTable(data.users || [])\r\n  } catch (err) {\r\n    console.error('Błąd ładowania użytkowników:', err)\r\n    tbody.innerHTML = '<tr><td colspan=\"5\" style=\"color:crimson\">Błąd ładowania użytkowników.</td></tr>'\r\n    toastError(err.message || 'Nie udało się wczytać użytkowników.')\r\n  }\r\n}\r\n\r\nfunction renderTable(users) {\r\n  const tbody = document.getElementById('pendingBody')\r\n  if (!tbody) return\r\n\r\n  if (!Array.isArray(users) || users.length === 0) {\r\n    tbody.innerHTML = '<tr><td colspan=\"5\">Brak użytkowników do wyświetlenia.</td></tr>'\r\n    return\r\n  }\r\n\r\n  tbody.innerHTML = users.map(user => {\r\n    // ZMIANA 1: Formatowanie createdAt do rrrr-mm-dd gg:mm\r\n    const createdAt = user.createdAt \r\n      ? new Date(user.createdAt).toLocaleString('pl-PL', {\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          hour12: false\r\n        }).replace(',', '').replace(/(\\d{2})\\.(\\d{2})\\.(\\d{4})/, '$3-$2-$1')\r\n      : '-'\r\n    return `\r\n      <tr data-id=\"${user._id}\">\r\n        <td>${escapeHTML(user.username)}</td>\r\n        <td>${escapeHTML(user.email)}</td>\r\n        <td>${escapeHTML(user.role)}</td>\r\n        <!-- ZMIANA 2: Dodano kolumnę z createdAt -->\r\n        <td>${createdAt}</td>\r\n        <td>\r\n          <button class=\"btn--sm btn-approve-user\">Zatwierdź</button>\r\n          <button class=\"btn--sm btn--danger btn-reject-user\">Odrzuć</button>\r\n        </td>\r\n      </tr>\r\n    `\r\n  }).join('')\r\n}\r\n\r\ndocument.getElementById('pendingTable')?.addEventListener('click', async (e) => {\r\n  const row = e.target.closest('tr[data-id]')\r\n  if (!row) return\r\n  const id = row.dataset.id\r\n\r\n  if (e.target.classList.contains('btn-approve-user')) {\r\n    const ok = await confirmToast({\r\n      message: 'Zatwierdzić tego użytkownika?',\r\n      okText: 'Zatwierdź',\r\n      cancelText: 'Anuluj'\r\n    })\r\n    if (!ok) return\r\n\r\n    try {\r\n      const res = await fetch(`${API_BASE}/api/admin/approve/${id}`, {\r\n        method: 'POST',\r\n        credentials: 'include'\r\n      })\r\n      const data = await res.json()\r\n      if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)\r\n      row.remove()\r\n      toast('Użytkownik zatwierdzony.', 'success')\r\n    } catch (err) {\r\n      toastError(err.message || 'Błąd zatwierdzania użytkownika.')\r\n    }\r\n    return\r\n  }\r\n\r\n  if (e.target.classList.contains('btn-reject-user')) {\r\n    const ok = await confirmToast({\r\n      message: 'Odrzucić tego użytkownika?',\r\n      okText: 'Odrzuć',\r\n      cancelText: 'Anuluj'\r\n    })\r\n    if (!ok) return\r\n\r\n    try {\r\n      const res = await fetch(`${API_BASE}/api/admin/reject/${id}`, {\r\n        method: 'DELETE',\r\n        credentials: 'include'\r\n      })\r\n      const data = await res.json()\r\n      if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)\r\n      row.remove()\r\n      toast('Użytkownik odrzucony.', 'success')\r\n    } catch (err) {\r\n      toastError(err.message || 'Błąd odrzucania użytkownika.')\r\n    }\r\n  }\r\n})\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  console.log('DOMContentLoaded: Sprawdzam DOM...')\r\n  console.log('pendingTable:', document.getElementById('pendingTable'))\r\n  console.log('pendingBody:', document.getElementById('pendingBody'))\r\n  loadPendingUsers()\r\n})"]}