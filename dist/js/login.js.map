{"version":3,"file":"login.js","names":["API_BASE","toast","toastError","isEmail","s","test","String","trim","showError","msg","el","document","getElementById","textContent","hidden","style","display","showSuccess","computeSafeRedirect","role","next","URLSearchParams","location","search","get","url","URL","origin","p","pathname","toLowerCase","endsWith","hash","async","onSubmit","e","preventDefault","emailEl","passEl","errorEl","submitBtn","submitter","querySelector","email","value","password","length","disabled","res","fetch","method","headers","credentials","body","JSON","stringify","data","json","ok","status","message","pRes","target","setTimeout","replace","addEventListener","form"],"sources":["login.js"],"mappings":"OACSA,aAAgB,kBAChBC,MAAOC,eAAkB,aAElC,SAASC,QAAQC,GACf,MAAO,iBAAiBC,KAAKC,OAAOF,GAAK,IAAIG,OAC/C,CAEA,SAASC,UAAUC,GACjB,MAAMC,EAAKC,SAASC,eAAe,SAC/BF,IACFA,EAAGG,YAAcJ,EACjBC,EAAGI,QAAS,EACZJ,EAAGK,MAAMC,QAAU,IAEK,mBAAfd,YAA2BA,WAAWO,EACnD,CAEA,SAASQ,YAAYR,GACE,mBAAVR,OAAsBA,MAAMQ,EAAK,UAC9C,CAGA,SAASS,oBAAoBC,GAE3B,IAAIC,EADW,IAAIC,gBAAgBC,SAASC,QAC1BC,IAAI,SAAW,IAEjC,IACE,MAAMC,EAAM,IAAIC,IAAIN,EAAME,SAASK,QAGnC,GAAIF,EAAIE,SAAWL,SAASK,OAAQ,MAAO,IAG3C,MAAMC,EAAIH,EAAII,SAASC,cACvB,OAAIF,EAAEG,SAAS,gBAAkBH,EAAEG,SAAS,mBAGxCH,EAAEG,SAAS,gBAA2B,UAATZ,EAHqC,IAM/DM,EAAII,SAAWJ,EAAIF,OAASE,EAAIO,IACzC,CAAE,MACA,MAAO,GACT,CACF,CAQAC,eAAeC,SAASC,GACtBA,EAAEC,iBAEF,MAAMC,EAAU1B,SAASC,eAAe,SAClC0B,EAAU3B,SAASC,eAAe,YAClC2B,EAAU5B,SAASC,eAAe,SAClC4B,EAAYL,EAAEM,WAAa9B,SAAS+B,cAAc,oCAEpDH,IAASA,EAAQ1B,YAAc,IAEnC,MAAM8B,EAAQN,GAASO,OAAOrC,OACxBsC,EAAWP,GAAQM,OAAS,GAGlC,IAAKzC,QAAQwC,GAAQ,OAAOnC,UAAU,kCACtC,GAAIqC,EAASC,OAAS,EAAG,OAAOtC,UAAU,yCAEtCgC,IAAWA,EAAUO,UAAW,GAEpC,IACE,MAAMC,QAAYC,MAAM,GAAGjD,0BAA2B,CACpDkD,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,YAAa,UACbC,KAAMC,KAAKC,UAAU,CAAEZ,QAAOE,eAGhC,IAAIW,EAAO,CAAC,EACZ,IAAMA,QAAaR,EAAIS,MAAO,CAAE,MAAO,CAEvC,IAAKT,EAAIU,GACP,OAAmB,MAAfV,EAAIW,OAAuBnD,UAAUgD,GAAMI,SAAW,+DACvC,MAAfZ,EAAIW,QAAiC,MAAfX,EAAIW,OAAuBnD,UAAUgD,GAAMI,SAAW,mCACzEpD,UAAUgD,GAAMI,SAAW,iBAAiBZ,EAAIW,YAGzD1C,YAAY,yBAGZ,IAAIE,EAAO,KACX,IACE,MAAM0C,QAAaZ,MAAM,GAAGjD,6BAA8B,CAAEoD,YAAa,YACzE,GAAIS,EAAKH,GAAI,CACX,MAAM9B,QAAUiC,EAAKJ,OACrBtC,EAAOS,GAAGT,MAAQ,IACpB,CACF,CAAE,MAAO,CAKT,IAAI2C,EAAS5C,oBAAoBC,GAC5B2C,GAAqB,MAAXA,IACbA,EAAmB,UAAT3C,EAAoB,cAAgB,KAIhD4C,WAAW,KAAQzC,SAAS0C,QAAQF,IAAW,IAEjD,CAAE,MACAtD,UAAU,8BACZ,CAAE,QACIgC,IAAWA,EAAUO,UAAW,EACtC,CACF,CAtEApC,SAASsD,iBAAiB,mBAAoB,KAC5C,MAAMC,EAAOvD,SAASC,eAAe,aAChCsD,GACLA,EAAKD,iBAAiB,SAAU/B","ignoreList":[],"sourcesContent":["// src/js/login.js\nimport { API_BASE } from './api.js'\nimport { toast, toastError } from './toast.js' // jeśli nie używasz toastów, usuń importy i wywołania\n\nfunction isEmail(s) {\n  return /^\\S+@\\S+\\.\\S+$/.test(String(s || '').trim())\n}\n\nfunction showError(msg) {\n  const el = document.getElementById('error')\n  if (el) {\n    el.textContent = msg\n    el.hidden = false\n    el.style.display = ''\n  }\n  if (typeof toastError === 'function') toastError(msg)\n}\n\nfunction showSuccess(msg) {\n  if (typeof toast === 'function') toast(msg, 'success')\n}\n\n/** Bezpieczne wyliczenie adresu docelowego po logowaniu */\nfunction computeSafeRedirect(role) {\n  const params = new URLSearchParams(location.search)\n  let next = params.get('next') || '/'\n\n  try {\n    const url = new URL(next, location.origin)\n\n    // 1) tylko ten sam origin\n    if (url.origin !== location.origin) return '/'\n\n    // 2) nigdy nie kieruj na login/register (by uniknąć pętli)\n    const p = url.pathname.toLowerCase()\n    if (p.endsWith('/login.html') || p.endsWith('/register.html')) return '/'\n\n    // 3) jeśli next=/admin.html, ale user nie jest adminem → fallback na /\n    if (p.endsWith('/admin.html') && role !== 'admin') return '/'\n\n    // OK — zwróć ścieżkę (zachowaj parametry)\n    return url.pathname + url.search + url.hash\n  } catch {\n    return '/'\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const form = document.getElementById('loginForm')\n  if (!form) return\n  form.addEventListener('submit', onSubmit)\n})\n\nasync function onSubmit(e) {\n  e.preventDefault()\n\n  const emailEl = document.getElementById('email')\n  const passEl  = document.getElementById('password')\n  const errorEl = document.getElementById('error')\n  const submitBtn = e.submitter || document.querySelector('#loginForm button[type=\"submit\"]')\n\n  if (errorEl) errorEl.textContent = ''\n\n  const email = emailEl?.value?.trim()\n  const password = passEl?.value || ''\n\n  // Walidacja frontowa\n  if (!isEmail(email)) return showError('Podaj prawidłowy adres e-mail.')\n  if (password.length < 6) return showError('Hasło musi mieć co najmniej 6 znaków.')\n\n  if (submitBtn) submitBtn.disabled = true\n\n  try {\n    const res = await fetch(`${API_BASE}/api/auth/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include',\n      body: JSON.stringify({ email, password })\n    })\n\n    let data = {}\n    try { data = await res.json() } catch {}\n\n    if (!res.ok) {\n      if (res.status === 429) return showError(data?.message || 'Zbyt wiele prób logowania. Spróbuj ponownie za kilka minut.')\n      if (res.status === 400 || res.status === 401) return showError(data?.message || 'Nieprawidłowy e-mail lub hasło.')\n      return showError(data?.message || `Błąd serwera (${res.status}).`)\n    }\n\n    showSuccess('Zalogowano pomyślnie.')\n\n    // (opcjonalnie) sprawdź rolę — wykorzystamy do bezpiecznego redirectu\n    let role = null\n    try {\n      const pRes = await fetch(`${API_BASE}/api/users/profile`, { credentials: 'include' })\n      if (pRes.ok) {\n        const p = await pRes.json()\n        role = p?.role || null\n      }\n    } catch {}\n\n    // —— BEZPIECZNY REDIRECT ——\n    // Priorytet: ?next= (zweryfikowany), w przeciwnym razie:\n    // admin → /admin.html, inni → /\n    let target = computeSafeRedirect(role)\n    if (!target || target === '/') {\n      target = (role === 'admin') ? '/admin.html' : '/'\n    }\n\n    // nie zostawiaj login.html w historii\n    setTimeout(() => { location.replace(target) }, 300)\n\n  } catch {\n    showError('Błąd połączenia z serwerem.')\n  } finally {\n    if (submitBtn) submitBtn.disabled = false\n  }\n}\n"]}