{"version":3,"file":"toast.js","names":["ensureToastRoot","root","document","getElementById","classList","add","createElement","id","className","body","appendChild","toast","message","type","timeout","el","map","success","error","info","warn","warning","innerHTML","remove","addEventListener","once","t","setTimeout","clearTimeout","toastError","confirmToast","okText","cancelText","Promise","resolve","overlay","modal","setAttribute","okBtn","querySelector","cancelBtn","prevActive","activeElement","focus","cleanup","val","done","left","onEnd","onKey","e","key","timer","removeEventListener"],"sources":["toast.js"],"mappings":"AAGA,SAASA,kBACP,IAAIC,EAAOC,SAASC,eAAe,cASnC,OARKF,EAMHA,EAAKG,UAAUC,IAAI,gBALnBJ,EAAOC,SAASI,cAAc,OAC9BL,EAAKM,GAAK,aACVN,EAAKO,UAAY,cACjBN,SAASO,KAAKC,YAAYT,IAIrBA,CACT,QAEO,SAASU,MAAMC,EAASC,EAAO,OAAQC,EAAU,KACtD,MAAMb,EAAOD,kBACPe,EAAKb,SAASI,cAAc,OAClCS,EAAGP,UAAY,QAEf,MAAMQ,EAAM,CACVC,QAAS,iBACTC,MAAO,eACPC,KAAM,cACNC,KAAM,cACNC,QAAS,kBAEXN,EAAGX,UAAUC,IAAIW,EAAIH,IAASG,EAAIG,MAElCJ,EAAGO,UAAY,2BAA2BV,WAC1CX,EAAKS,YAAYK,GAEjB,MAAMQ,EAAS,KACbR,EAAGX,UAAUC,IAAI,eACjBU,EAAGS,iBAAiB,gBAAiB,IAAMT,EAAGQ,SAAU,CAAEE,MAAM,KAE5DC,EAAIC,WAAWJ,EAAQT,GAC7BC,EAAGS,iBAAiB,QAAS,KAAQI,aAAaF,GAAIH,KACxD,QAEO,SAASM,WAAWjB,EAASE,EAAU,KAC5CH,MAAMC,EAAS,QAASE,EAC1B,QAGO,SAASgB,cAAalB,QAC3BA,EAAOmB,OACPA,EAAS,KAAIC,WACbA,EAAa,SAAQlB,QACrBA,EAAU,GACR,CAAC,GACH,OAAO,IAAImB,QAAQC,IACjB,MAAMC,EAAUjC,SAASI,cAAc,OACvC6B,EAAQ3B,UAAY,gBAEpB,MAAM4B,EAAQlC,SAASI,cAAc,OACrC8B,EAAM5B,UAAY,uBAClB4B,EAAMC,aAAa,OAAQ,UAC3BD,EAAMC,aAAa,aAAc,QAEjCD,EAAMd,UAAY,mCACUV,GAAW,8HAEwBmB,kFACEC,iCAIjE9B,SAASO,KAAKC,YAAYyB,GAC1BjC,SAASO,KAAKC,YAAY0B,GAE1B,MAAME,EAAQF,EAAMG,cAAc,cAC5BC,EAAYJ,EAAMG,cAAc,kBAChCE,EAAavC,SAASwC,cAC5BJ,GAAOK,QAEP,MAAMC,EAAWC,IACfT,EAAMhC,UAAUC,IAAI,eACpB8B,EAAQ/B,UAAUC,IAAI,uBACtB,MAAMyC,EAAO,KACXV,EAAMb,SACNY,EAAQZ,SACRkB,GAAcA,EAAWE,UACzBT,EAAQW,IAEV,IAAIE,EAAO,EACX,MAAMC,EAAQ,KAAuB,MAATD,GAAYD,KACxCV,EAAMZ,iBAAiB,gBAAiBwB,EAAO,CAAEvB,MAAM,IACvDU,EAAQX,iBAAiB,gBAAiBwB,EAAO,CAAEvB,MAAM,IAEzDE,WAAWmB,EAAM,MAGbG,EAASC,IACC,WAAVA,EAAEC,KAAkBP,GAAQ,GAClB,UAAVM,EAAEC,KAAkBP,GAAQ,IAGlCN,GAAOd,iBAAiB,QAAS,IAAMoB,GAAQ,IAC/CJ,GAAWhB,iBAAiB,QAAS,IAAMoB,GAAQ,IACnDT,EAAQX,iBAAiB,QAAS,IAAMoB,GAAQ,IAChD1C,SAASsB,iBAAiB,UAAWyB,GAGrC,IAAIG,EAAQ,KACRtC,EAAU,GAAWa,WAAW,IAAMiB,GAAQ,GAAQ9B,GAI1DsB,EAAMZ,iBAAiB,gBADN,IAAMtB,SAASmD,oBAAoB,UAAWJ,GACb,CAAExB,MAAM,KAE9D","ignoreList":[],"sourcesContent":["// src/js/toast.js\r\n\r\n// --- zwykłe toasty (na dole ekranu) ---\r\nfunction ensureToastRoot() {\r\n  let root = document.getElementById('toast-root')\r\n  if (!root) {\r\n    root = document.createElement('div')\r\n    root.id = 'toast-root'\r\n    root.className = 'toast-layer'\r\n    document.body.appendChild(root)\r\n  } else {\r\n    root.classList.add('toast-layer')\r\n  }\r\n  return root\r\n}\r\n\r\nexport function toast(message, type = 'info', timeout = 3000) {\r\n  const root = ensureToastRoot()\r\n  const el = document.createElement('div')\r\n  el.className = 'toast'\r\n\r\n  const map = {\r\n    success: 'toast--success',\r\n    error: 'toast--error',\r\n    info: 'toast--info',\r\n    warn: 'toast--warn',\r\n    warning: 'toast--warning'\r\n  }\r\n  el.classList.add(map[type] || map.info)\r\n\r\n  el.innerHTML = `<span class=\"toast-msg\">${message}</span>`\r\n  root.appendChild(el)\r\n\r\n  const remove = () => {\r\n    el.classList.add('toast--hide')\r\n    el.addEventListener('transitionend', () => el.remove(), { once: true })\r\n  }\r\n  const t = setTimeout(remove, timeout)\r\n  el.addEventListener('click', () => { clearTimeout(t); remove() })\r\n}\r\n\r\nexport function toastError(message, timeout = 4000) {\r\n  toast(message, 'error', timeout)\r\n}\r\n\r\n// --- confirm modal (wyśrodkowany w viewport, z overlay) ---\r\nexport function confirmToast({\r\n  message,\r\n  okText = 'OK',\r\n  cancelText = 'Anuluj',\r\n  timeout = 0 // 0 = bez auto-zamykania\r\n} = {}) {\r\n  return new Promise(resolve => {\r\n    const overlay = document.createElement('div')\r\n    overlay.className = 'toast-overlay'\r\n\r\n    const modal = document.createElement('div')\r\n    modal.className = 'toast toast--confirm'\r\n    modal.setAttribute('role', 'dialog')\r\n    modal.setAttribute('aria-modal', 'true')\r\n\r\n    modal.innerHTML = `\r\n      <div class=\"toast__msg\">${message || 'Potwierdzić?'}</div>\r\n      <div class=\"toast__actions\">\r\n        <button type=\"button\" class=\"btn btn--primary toast__ok\">${okText}</button>\r\n        <button type=\"button\" class=\"btn btn--ghost toast__cancel\">${cancelText}</button>\r\n      </div>\r\n    `\r\n\r\n    document.body.appendChild(overlay)\r\n    document.body.appendChild(modal)\r\n\r\n    const okBtn = modal.querySelector('.toast__ok')\r\n    const cancelBtn = modal.querySelector('.toast__cancel')\r\n    const prevActive = document.activeElement\r\n    okBtn?.focus()\r\n\r\n    const cleanup = (val) => {\r\n      modal.classList.add('toast--hide')\r\n      overlay.classList.add('toast-overlay--hide')\r\n      const done = () => {\r\n        modal.remove()\r\n        overlay.remove()\r\n        prevActive && prevActive.focus?.()\r\n        resolve(val)\r\n      }\r\n      let left = 0\r\n      const onEnd = () => { if (++left === 2) done() }\r\n      modal.addEventListener('transitionend', onEnd, { once: true })\r\n      overlay.addEventListener('transitionend', onEnd, { once: true })\r\n      // fallback gdyby nie było transitionend\r\n      setTimeout(done, 250)\r\n    }\r\n\r\n    const onKey = (e) => {\r\n      if (e.key === 'Escape') cleanup(false)\r\n      if (e.key === 'Enter')  cleanup(true)\r\n    }\r\n\r\n    okBtn?.addEventListener('click', () => cleanup(true))\r\n    cancelBtn?.addEventListener('click', () => cleanup(false))\r\n    overlay.addEventListener('click', () => cleanup(false))\r\n    document.addEventListener('keydown', onKey)\r\n\r\n    // auto-close (jeśli ustawiono)\r\n    let timer = null\r\n    if (timeout > 0) timer = setTimeout(() => cleanup(false), timeout)\r\n\r\n    // posprzątaj nasłuch klawiatury przy zamknięciu\r\n    const stopKeys = () => document.removeEventListener('keydown', onKey)\r\n    modal.addEventListener('transitionend', stopKeys, { once: true })\r\n  })\r\n}\r\n"]}