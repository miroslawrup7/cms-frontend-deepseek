Frontend v.7

==================================
STRUKTURA PROJEKTU
==================================

+ 
  # [EXCLUDED] .git
  - .gitattributes
  - .gitignore
  # [EXCLUDED] README.md
  # [EXCLUDED] dist
  - gulpfile.js
  # [EXCLUDED] node_modules
  # [EXCLUDED] package-lock.json
  - package.json
  # [EXCLUDED] scalacz_frontendu
  + src
    - src\admin.html
    - src\article.html
    + src\config
      - src\config\config.json
    + src\fonts
    + src\img
    - src\index.html
    + src\js
      - src\js\admin.js
      - src\js\api.js
      - src\js\article.js
      - src\js\header.js
      - src\js\login.js
      - src\js\main.js
      - src\js\nav.js
      - src\js\new-article.js
      - src\js\register.js
      - src\js\toast.js
    - src\login.html
    - src\new-article.html
    + src\php
    - src\register.html
    + src\scss
      + src\scss\components
        - src\scss\components\_admin-panel.scss
        - src\scss\components\_comments.scss
        - src\scss\components\_toast.scss
      - src\scss\main.scss

==================================
.gitattributes v.1
==================================

* text=auto

==================================
.gitignore v.1
==================================

# Node modules
**/node_modules/

# Env files
**/.env

# System files
.DS_Store
Thumbs.db

# Logs
**/logs/
**/*.log

**/dist/

==================================
gulpfile.js v.1
==================================

const { src, dest, watch, series, parallel } = require('gulp')
const sass = require('gulp-sass')(require('sass'))
const postcss = require('gulp-postcss')
const sourcemaps = require('gulp-sourcemaps')
const terser = require('gulp-terser')
const browserSync = require('browser-sync').create()
const replace = require('gulp-replace')
const fs = require('fs/promises')
const path = require('path')

const autoprefixer = require('autoprefixer')
const cssnano = require('cssnano')

const paths = {
    html: { src: 'src/**/*.html', dest: 'dist/' },
    js: { src: 'src/js/**/*.js', dest: 'dist/js/' },
    scss: { 
        entry: 'src/scss/main.scss',
        watch: 'src/scss/**/*.scss',
        dest: 'dist/css/' 
    },
    config: { src: 'src/config/**/*.json', dest: 'dist/config/' },
    img: { src: 'src/img/**/*', dest: 'dist/img/' }
}

async function clean() {
    const dir = path.resolve('dist')
    await fs.rm(dir, { recursive: true, force: true })
}

function html() {
    return src(paths.html.src).pipe(dest(paths.html.dest))
}

function config() {
    return src(paths.config.src).pipe(dest(paths.config.dest))
}

function images() {
    return src(paths.img.src, { allowEmpty: true }).pipe(dest(paths.img.dest))
}

function js() {
    return src(paths.js.src)
        .pipe(sourcemaps.init())
        .pipe(terser({ ecma: 2017 }).on('error', function(e){
            console.error(e.message)
            this.emit('end')
        }))
        .pipe(sourcemaps.write('.'))
        .pipe(dest(paths.js.dest))
}

function scss() {
    return src(paths.scss.entry)
        .pipe(sourcemaps.init())
        .pipe(sass().on('error', sass.logError))
        .pipe(postcss([autoprefixer(), cssnano()]))
        .pipe(sourcemaps.write('.'))
        .pipe(dest(paths.scss.dest))
        .pipe(browserSync.stream()) // <-- live reload CSS bez pełnego przeładowania
}

function cacheBust() {
    const timestamp = new Date().getTime()
    return src('dist/**/*.html')
        .pipe(replace(/cache_bust=\d+/g, `cache_bust=${timestamp}`))
        .pipe(dest('dist'))
}

function serve() {
    browserSync.init({
        server: { baseDir: 'dist' },
        notify: false,
        port: 3000
    })

    watch(paths.html.src, series(html, cacheBust)).on('change', browserSync.reload)
    watch(paths.scss.watch, scss) 
    watch(paths.js.src, series(js, cacheBust)).on('change', browserSync.reload)
    watch(paths.config.src, series(config, cacheBust)).on('change', browserSync.reload)
    watch(paths.img.src, series(images, cacheBust)).on('change', browserSync.reload)
}

exports.clean = clean
exports.build = series(clean, parallel(html, scss, js, config, images), cacheBust)
exports.default = series(clean, parallel(html, scss, js, config, images), cacheBust, serve)


==================================
package.json v.1
==================================

{
    "name": "gulp-modern-starter",
    "version": "1.0.0",
    "description": "Gulp5",
    "scripts": {
        "start": "gulp"
    },
    "devDependencies": {
        "autoprefixer": "^10.4.17",
        "browser-sync": "^3.0.4",
        "cssnano": "^7.1.0",
        "gulp": "^5.0.1",
        "gulp-dart-sass": "^1.1.0",
        "gulp-postcss": "^10.0.0",
        "gulp-replace": "^1.1.4",
        "gulp-sass": "^6.0.1",
        "gulp-sourcemaps": "^3.0.0",
        "gulp-terser": "^2.1.0",
        "sass": "^1.90.0"
    }
}

==================================
src\admin.html v.1
==================================

<!DOCTYPE html>
<html lang="pl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/main.css?cache_bust=123">
    <title>Panel administratora</title>
</head>

<body>
    <main class="container">
        <h1>Wnioski rejestracyjne</h1>
        <table id="pendingTable">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>E-mail</th>
                    <th>Rola</th>
                    <!-- ZMIANA 1: Dodano kolumnę Data utworzenia -->
                    <th>Data utworzenia</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody id="pendingBody">
                <!-- ZMIANA 2: Zmieniono colspan z 4 na 5 -->
                <tr>
                    <td colspan="5">Ładowanie…</td>
                </tr>
            </tbody>
        </table>
    </main>
    <script type="module" src="./js/nav.js?cache_bust=123"></script>
    <script type="module" src="./js/header.js?cache_bust=123"></script>
    <script type="module" src="./js/admin.js?cache_bust=123"></script>
</body>

</html>

==================================
src\article.html v.1
==================================

<!DOCTYPE html>
<html lang="pl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/main.css?cache_bust=123">
    <title>Artykuł</title>

<body>

    <main class="article-wrapper">
        <article id="article">
            <a id="backToListBtn" href="/" class="btn btn--ghost btn--sm">← Wróć do listy</a>

            <h1 id="article-title">Ładowanie...</h1>

            <p id="article-meta" class="article-meta"></p>

            <!-- nowa galeria zamiast pojedynczego <img> -->
            <div id="article-gallery" class="article-gallery"></div>

            <div id="article-content" class="article-content"></div>

            <section class="comments-section">
                <h3>Komentarze</h3>
                <div id="comments-container">
                    <p>Ładowanie komentarzy...</p>
                </div>
            </section>

            <div id="comment-form-section" style="display:none">
                <h3>Dodaj komentarz</h3>
                <form id="comment-form">
                    <textarea id="comment-text" placeholder="Napisz swój komentarz..." required></textarea>
                    <button type="submit">Wyślij</button>
                </form>
                <div id="comment-error" style="color: red; display: none;"></div>
            </div>

        </article>
    </main>

    <script type="module" src="./js/nav.js?cache_bust=123"></script>
    <script type="module" src="./js/header.js?cache_bust=123"></script>
    <script type="module" src="./js/article.js?cache_bust=123"></script>

</body>

</html>

==================================
src\config\config.json v.1
==================================

{
    "API_BASE": "http://localhost:5000"
}

==================================
src\index.html v.1
==================================

<!DOCTYPE html>
<html lang="pl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/main.css?cache_bust=123">
    <title>Artykuły</title>
</head>

<body>

    <main class="main-wrapper">
        <div class="page-header">
            <h1 class="page-title">Artykuły</h1>

            <a href="/new-article.html" data-role="authorOrAdmin" class="btn btn--primary hidden" id="newArticleTopBtn">
                Dodaj artykuł
            </a>
        </div>

        <section class="filters">
            <input type="search" id="q" placeholder="Szukaj w tytule i treści…" />
            <select id="sort">
                <option value="newest">Najnowsze</option>
                <option value="mostLiked">Najpopularniejsze</option>
                <option value="oldest">Najstarsze</option>
                <option value="titleAZ">Tytuł A–Z</option>
                <option value="titleZA">Tytuł Z–A</option>
            </select>
        </section>


        <div id="articles-container"></div>

        <div id="pagination" class="pagination">
            <button id="prev">Poprzednia</button>
            <span id="page-info"></span>
            <button id="next">Następna</button>
        </div>
    </main>

    <script type="module" src="./js/nav.js?cache_bust=123"></script>
    <script type="module" src="./js/header.js?cache_bust=123"></script>
    <script type="module" src="./js/main.js?cache_bust=123"></script>
</body>

</html>

==================================
src\js\admin.js v.1
==================================

import { API_BASE } from './api.js'
import { toast, toastError, confirmToast } from './toast.js'

function escapeHTML(str) {
  if (!str) return ''
  return str.replace(/&/g, '&amp;')
           .replace(/</g, '&lt;')
           .replace(/>/g, '&gt;')
           .replace(/"/g, '&quot;')
           .replace(/'/g, '&#39;')
}

async function loadPendingUsers() {
  const table = document.getElementById('pendingTable')
  const tbody = document.getElementById('pendingBody')
  console.log('Sprawdzam DOM: pendingTable=', !!table, 'pendingBody=', !!tbody)
  if (!table || !tbody) {
    console.error('Brak elementów DOM: pendingTable=', table, 'pendingBody=', tbody)
    return
  }

  tbody.innerHTML = '<tr><td colspan="5">Ładowanie…</td></tr>'

  try {
    console.log(`Wysyłam fetch: ${API_BASE}/api/admin/pending-users`)
    const res = await fetch(`${API_BASE}/api/admin/pending-users`, {
      credentials: 'include'
    })
    const data = await res.json()
    console.log('Odpowiedź z API:', data)
    if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)
    
    renderTable(data.users || [])
  } catch (err) {
    console.error('Błąd ładowania użytkowników:', err)
    tbody.innerHTML = '<tr><td colspan="5" style="color:crimson">Błąd ładowania użytkowników.</td></tr>'
    toastError(err.message || 'Nie udało się wczytać użytkowników.')
  }
}

function renderTable(users) {
  const tbody = document.getElementById('pendingBody')
  if (!tbody) return

  if (!Array.isArray(users) || users.length === 0) {
    tbody.innerHTML = '<tr><td colspan="5">Brak użytkowników do wyświetlenia.</td></tr>'
    return
  }

  tbody.innerHTML = users.map(user => {
    // ZMIANA 1: Formatowanie createdAt do rrrr-mm-dd gg:mm
    const createdAt = user.createdAt 
      ? new Date(user.createdAt).toLocaleString('pl-PL', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          hour12: false
        }).replace(',', '').replace(/(\d{2})\.(\d{2})\.(\d{4})/, '$3-$2-$1')
      : '-'
    return `
      <tr data-id="${user._id}">
        <td>${escapeHTML(user.username)}</td>
        <td>${escapeHTML(user.email)}</td>
        <td>${escapeHTML(user.role)}</td>
        <!-- ZMIANA 2: Dodano kolumnę z createdAt -->
        <td>${createdAt}</td>
        <td>
          <button class="btn--sm btn-approve-user">Zatwierdź</button>
          <button class="btn--sm btn--danger btn-reject-user">Odrzuć</button>
        </td>
      </tr>
    `
  }).join('')
}

document.getElementById('pendingTable')?.addEventListener('click', async (e) => {
  const row = e.target.closest('tr[data-id]')
  if (!row) return
  const id = row.dataset.id

  if (e.target.classList.contains('btn-approve-user')) {
    const ok = await confirmToast({
      message: 'Zatwierdzić tego użytkownika?',
      okText: 'Zatwierdź',
      cancelText: 'Anuluj'
    })
    if (!ok) return

    try {
      const res = await fetch(`${API_BASE}/api/admin/approve/${id}`, {
        method: 'POST',
        credentials: 'include'
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)
      row.remove()
      toast('Użytkownik zatwierdzony.', 'success')
    } catch (err) {
      toastError(err.message || 'Błąd zatwierdzania użytkownika.')
    }
    return
  }

  if (e.target.classList.contains('btn-reject-user')) {
    const ok = await confirmToast({
      message: 'Odrzucić tego użytkownika?',
      okText: 'Odrzuć',
      cancelText: 'Anuluj'
    })
    if (!ok) return

    try {
      const res = await fetch(`${API_BASE}/api/admin/reject/${id}`, {
        method: 'DELETE',
        credentials: 'include'
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)
      row.remove()
      toast('Użytkownik odrzucony.', 'success')
    } catch (err) {
      toastError(err.message || 'Błąd odrzucania użytkownika.')
    }
  }
})

document.addEventListener('DOMContentLoaded', () => {
  console.log('DOMContentLoaded: Sprawdzam DOM...')
  console.log('pendingTable:', document.getElementById('pendingTable'))
  console.log('pendingBody:', document.getElementById('pendingBody'))
  loadPendingUsers()
})

==================================
src\js\api.js v.1
==================================

// src/js/api.js
let API_BASE = "http://localhost:5000"

fetch('/config/config.json', { cache: 'no-store' })
    .then(res => res.ok ? res.json() : null)
    .then(cfg => {
        if (cfg?.API_BASE) API_BASE = cfg.API_BASE
    })
    .catch(() => {
        console.warn("Nie udało się wczytać config.json, używam domyślnego API_BASE:", API_BASE)
    })

export { API_BASE }

// ogólny helper: rzuca błędem przy !ok; przy 401/403 dodatkowo kieruje na login (z ?next=)
export async function api(path, options = {}) {
  const res = await fetch(`${API_BASE}${path}`, {
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    ...options
  })
  let data = null
  try { data = await res.json() } catch {}

  if (res.status === 401 || res.status === 403) {
    const next = encodeURIComponent(location.pathname + location.search)
    // nie przekierowujemy, jeśli już jesteśmy na stronie logowania
    if (!location.pathname.endsWith("/login.html")) {
      location.href = `/login.html?next=${next}`
    }
    throw new Error(data?.message || "Wymagane zalogowanie")
  }
  if (!res.ok) {
    throw new Error(data?.message || `Błąd ${res.status}`)
  }
  return data
}

// wariant do świadomej obsługi statusu (np. dla 409 itp.)
export async function apiWithStatus(path, options = {}) {
  const res = await fetch(`${API_BASE}${path}`, {
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    ...options
  })
  let data = null
  try { data = await res.json() } catch {}
  return { status: res.status, ok: res.ok, data }
}

// pobranie profilu; zwraca obiekt lub null
export async function getProfile() {
  const { status, data } = await apiWithStatus('/api/users/profile')
  return status === 200 ? data : null
}


==================================
src\js\article.js v.1
==================================

import { getProfile, API_BASE } from './api.js'
import { toast, toastError, confirmToast } from './toast.js'

const urlParams = new URLSearchParams(window.location.search)
const articleId = urlParams.get('id')

const titleEl = document.getElementById('article-title')
const contentEl = document.getElementById('article-content')
const metaEl = document.getElementById('article-meta')
const galleryEl = document.getElementById('article-gallery')

let likesCount = 0
let likedByMe = false

async function loadArticle() {
  titleEl.textContent = 'Ładowanie…'
  contentEl.innerHTML = ''
  metaEl.textContent = ''
  galleryEl.innerHTML = ''

  try {
    const res = await fetch(`${API_BASE}/api/articles/${articleId}`, {
      credentials: 'include'
    })
    const data = await res.json()
    if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)
    const a = data.article || data

    likesCount = Array.isArray(a.likes) ? a.likes.length : (a.likesCount || 0)

    let me = null
    try { me = await getProfile() } catch {}
    if (me) {
      const formSection = document.getElementById('comment-form-section')
      if (formSection) formSection.style.display = 'block'
    }
    const isOwner = me && (me.role === 'admin' || String(me._id) === String(a.author?._id || a.author))
    likedByMe = !!(me && Array.isArray(a.likes) && a.likes.some(id => String(id) === String(me._id)))

    const images = Array.isArray(a.images) ? a.images : []
    const commentCount = typeof a.commentCount === 'number' ? a.commentCount : (data.commentCount || 0)
    const authorLabel = a.author?.email || a.author?.username || 'Autor'

    titleEl.textContent = a.title || '(bez tytułu)'
    contentEl.innerHTML = (a.content || '').replace(/\n/g, '<br>')

    const parts = []
    if (authorLabel) parts.push(authorLabel)
    if (a.createdAt) parts.push(fmtDate(a.createdAt))
    parts.push(`👍 <span id="likes-count">${likesCount}</span>`)
    parts.push(`💬 <span id="comments-count">${commentCount}</span>`)

    metaEl.innerHTML = `
    <div class="meta-left">
        ${parts.join(' • ')}
    </div>
    <div class="meta-right">
        ${(!isOwner && me) ? `
        <button id="like-btn"
                class="btn btn--ghost btn--like"
                aria-pressed="${likedByMe ? 'true' : 'false'}"
                aria-label="${likedByMe ? 'Cofnij polubienie' : 'Polub artykuł'}">
            <span class="like-label">${likedByMe ? 'Lubisz' : 'Lubię to'}</span>
        </button>
        ` : ''}
        ${isOwner ? `
        <a id="editArticleBtn" class="btn btn--ghost" href="/new-article.html?id=${a._id}">
            Edytuj artykuł
        </a>
        <button id="deleteArticleBtn" class="btn btn--danger">Usuń artykuł</button>
        ` : ''}
    </div>
    `

    if (me && !isOwner) {
      document.getElementById('like-btn')?.addEventListener('click', handleLikeToggle)
    }

    if (isOwner) {
      document.getElementById('deleteArticleBtn')?.addEventListener('click', handleDeleteArticle)
    }

    renderGallery(images)
  } catch (err) {
    titleEl.textContent = 'Błąd'
    metaEl.textContent = ''
    contentEl.innerHTML = `<p style="color:crimson">${err.message || 'Nie udało się wczytać artykułu.'}</p>`
    galleryEl.innerHTML = ''
  }
}

async function loadComments() {
  const container = document.getElementById('comments-container')
  if (!container) return

  container.innerHTML = '<p>Ładowanie komentarzy…</p>'

  try {
    const res = await fetch(`${API_BASE}/api/comments/${articleId}`)
    const comments = await res.json()

    // 🔧 Ustaw licznik komentarzy na aktualną liczbę (bez inkrementacji)
    const count = Array.isArray(comments) ? comments.length : 0
    const counterEl = document.getElementById('comments-count')
    if (counterEl) counterEl.textContent = String(count)

    if (!Array.isArray(comments) || comments.length === 0) {
      container.innerHTML = '<p>Brak komentarzy.</p>'
      return
    }

    let me = null
    try { me = await getProfile() } catch {}

    container.innerHTML = comments.map(c => {
      const isAuthor = me && String(me._id) === String(c.author?._id || c.author)
      const isAdmin  = me && me.role === 'admin'
      const canEdit  = !!(isAuthor || isAdmin)

      return `
        <div class="comment" data-id="${c._id}">
          <p class="comment-text">${c.text}</p>
          <div class="comment-meta">
            <span>${c.author?.username || 'Anonim'}</span> •
            <span>${new Date(c.createdAt).toLocaleString()}</span>
            ${canEdit ? `
              <button class="btn--sm btn-edit-comment">Edytuj</button>
              <button class="btn--sm btn--danger btn-delete-comment">Usuń</button>
            ` : ''}
          </div>
        </div>
      `
    }).join('')
  } catch (err) {
    container.innerHTML = '<p style="color:crimson">Błąd ładowania komentarzy</p>'
    toastError('Błąd ładowania komentarzy')
  }
}

// ZMIANA 1: Usunięto duplikat renderComments – niepotrzebny, loadComments renderuje bezpośrednio
// ZMIANA 2: Usunięto obsługę kliknięć na comments-list – starsza wersja, mniej kompletna

document.getElementById('comments-container')?.addEventListener('click', async (e) => {
  const container = e.currentTarget
  const commentEl = e.target.closest('.comment')
  if (!commentEl) return
  const id = commentEl.dataset.id

  // Usuń komentarz
  if (e.target.closest('.btn-delete-comment')) {
    const ok = await confirmToast({
      message: 'Usunąć ten komentarz?',
      okText: 'Usuń',
      cancelText: 'Anuluj'
    })
    if (!ok) return

    try {
      const res = await fetch(`${API_BASE}/api/comments/${id}`, {
        method: 'DELETE',
        credentials: 'include'
      })
      if (!res.ok) throw new Error((await res.json())?.message || `Błąd ${res.status}`)
      commentEl.remove()
      toast('Komentarz usunięty.', 'success')
      await loadComments() 


      if (!container.querySelector('.comment')) {
        container.innerHTML = '<p>Brak komentarzy.</p>'
      }
    } catch (err) {
      toastError(err.message || 'Błąd usuwania komentarza.')
    }
    return
  }

  // Wejdź w tryb edycji
  if (e.target.closest('.btn-edit-comment')) {
    if (commentEl.classList.contains('is-editing') ||
        commentEl.querySelector('.edit-comment-text')) return

    const textWrap = commentEl.querySelector('.comment-text')
    if (!textWrap) return

    commentEl.dataset.originalHtml = textWrap.innerHTML
    const oldText = textWrap.textContent
    textWrap.innerHTML = `
      <textarea class="edit-comment-text">${oldText}</textarea>
      <div class="edit-actions">
        <button class="btn--sm btn-save-comment">Zapisz</button>
        <button class="btn--sm btn-cancel-edit">Anuluj</button>
      </div>
    `
    commentEl.classList.add('is-editing')

    const editBtn = commentEl.querySelector('.btn-edit-comment')
    if (editBtn) editBtn.disabled = true

    commentEl.querySelector('.edit-comment-text')?.focus()
    return
  }

  // Anuluj edycję
  if (e.target.closest('.btn-cancel-edit')) {
    const textWrap = commentEl.querySelector('.comment-text')
    const original = commentEl.dataset.originalHtml || textWrap?.textContent || ''
    if (textWrap) textWrap.innerHTML = original

    commentEl.classList.remove('is-editing')
    delete commentEl.dataset.originalHtml

    const editBtn = commentEl.querySelector('.btn-edit-comment')
    if (editBtn) editBtn.disabled = false
    return
  }

  // Zapisz edycję
  if (e.target.closest('.btn-save-comment')) {
    const area = commentEl.querySelector('.edit-comment-text')
    const newText = (area?.value || '').trim()
    if (newText.length < 6) {
      toastError('Komentarz musi mieć co najmniej 6 znaków.')
      area?.focus()
      return
    }

    try {
      const res = await fetch(`${API_BASE}/api/comments/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ text: newText })
      })
      const data = await res.json().catch(() => ({}))
      if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)

      const textWrap = commentEl.querySelector('.comment-text')
      if (textWrap) textWrap.innerHTML = data.text

      toast('Komentarz zaktualizowany.', 'success')
    } catch (err) {
      toastError(err.message || 'Błąd zapisu komentarza.')
      return
    } finally {
      commentEl.classList.remove('is-editing')
      delete commentEl.dataset.originalHtml
      const editBtn = commentEl.querySelector('.btn-edit-comment')
      if (editBtn) editBtn.disabled = false
    }
  }
})

// Formularz komentarza
document.getElementById("comment-form")?.addEventListener("submit", async (e) => {
  e.preventDefault()

  const textarea = document.getElementById("comment-text")
  const commentText = (textarea?.value || "").trim()

  if (!commentText || commentText.length < 6) {
    toastError("Komentarz musi mieć przynajmniej 6 znaków.")
    textarea?.focus()
    return
  }

  try {
    const res = await fetch(`${API_BASE}/api/comments/${articleId}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ text: commentText })
    })

    let data = {}
    try { data = await res.json() } catch {}

    if (!res.ok) {
      const msg = data?.message || "Błąd serwera"
      toastError(msg)

      if (
        res.status === 400 &&
        /pusty po odfiltrowaniu|co najmniej 6 znaków|nie może być pusty/i.test(msg)
      ) {
        if (textarea) {
          textarea.value = ""
          textarea.focus()
        }
      }
      return
    }

    if (textarea) textarea.value = ""
    await loadComments()
  } catch (err) {
    toastError(err?.message || "Błąd połączenia z serwerem")
    textarea?.focus()
  }
})

function fmtDate(iso) {
  if (!iso) return ''
  try {
    const d = new Date(iso)
    return d.toLocaleDateString('pl-PL', { year: 'numeric', month: 'long', day: 'numeric' })
  } catch { return '' }
}

function renderGallery(images = []) {
  galleryEl.innerHTML = ''
  if (!images || images.length === 0) return

  const safe = images.map(src => `${API_BASE}/${String(src).replace(/^\/+/, '')}`)

  const main = document.createElement('div')
  main.className = 'gallery-main'
  main.innerHTML = `<img src="${safe[0]}" alt="">`

  const thumbs = document.createElement('div')
  thumbs.className = 'thumbs'
  thumbs.innerHTML = safe.map((s, i) =>
    `<img src="${s}" alt="" data-idx="${i}" class="${i === 0 ? 'active' : ''}">`
  ).join('')

  thumbs.addEventListener('click', (e) => {
    const img = e.target.closest('img[data-idx]')
    if (!img) return
    const idx = Number(img.dataset.idx)
    main.querySelector('img').src = safe[idx]
    thumbs.querySelectorAll('img').forEach(t => t.classList.remove('active'))
    img.classList.add('active')
  })

  galleryEl.appendChild(main)
  if (safe.length > 1) galleryEl.appendChild(thumbs)
}

let likeBusy = false

async function handleLikeToggle(e) {
  if (likeBusy) return
  likeBusy = true
  const btn = e.currentTarget
  btn.disabled = true

  const countEl = document.getElementById('likes-count')
  const prevLiked = likedByMe
  const prevCount = likesCount

  likedByMe = !likedByMe
  likesCount += likedByMe ? 1 : -1
  if (countEl) countEl.textContent = String(Math.max(0, likesCount))
  btn.querySelector('.like-label').textContent = likedByMe ? 'Lubisz' : 'Lubię to'
  btn.setAttribute('aria-pressed', likedByMe ? 'true' : 'false')

  try {
    const res = await fetch(`${API_BASE}/api/articles/${articleId}/like`, {
      method: 'POST',
      credentials: 'include'
    })
    const data = await res.json()
    if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)
  } catch (err) {
    likedByMe = prevLiked
    likesCount = prevCount
    if (countEl) countEl.textContent = String(Math.max(0, likesCount))
    btn.querySelector('.like-label').textContent = likedByMe ? 'Lubisz' : 'Lubię to'
    btn.setAttribute('aria-pressed', likedByMe ? 'true' : 'false')
    toastError(err.message || 'Błąd polubienia artykułu')
  } finally {
    likeBusy = false
    btn.disabled = false
  }
}

async function handleDeleteArticle() {
  const confirmed = await confirmToast({
    message: 'Usunąć ten artykuł?',
    okText: 'Usuń',
    cancelText: 'Anuluj'
  })
  if (!confirmed) return

  try {
    const res = await fetch(`${API_BASE}/api/articles/${articleId}`, {
      method: 'DELETE',
      credentials: 'include'
    })
    if (!res.ok) throw new Error((await res.json())?.message || `Błąd ${res.status}`)
    toast('Artykuł usunięty.', 'success')
    window.location.href = '/'
  } catch (err) {
    toastError(err.message || 'Błąd usuwania artykułu.')
  }
}

// Inicjalizacja
document.addEventListener('DOMContentLoaded', () => {
  loadArticle()
  loadComments()
})

==================================
src\js\header.js v.1
==================================

import { API_BASE, getProfile } from './api.js'

/* Zbuduj HTML nagłówka */
function buildHeader() {
  return `
<header class="site-header">
  <div class="nav-wrap">
    <a class="brand" href="/">CMS</a>
    <nav class="nav-actions">
      <a id="btnLogin" class="btn btn--ghost" href="/login.html">Zaloguj</a>
      <a id="btnRegister" class="btn btn--primary" href="/register.html">Zarejestruj</a>

      <a id="adminNavBtn" data-role="admin" class="btn btn--ghost hidden" href="/admin.html">Panel admina</a>

      <div id="userMenu" class="user-menu" style="display:none">
        <button id="userToggle" class="user-chip" aria-expanded="false">
          <span id="userName">Użytkownik</span>
          <span class="user-avatar" aria-hidden="true">👤</span>
        </button>
        <div id="userDropdown" class="user-dropdown" hidden>
          <a id="newArticleBtn" href="/new-article.html" data-role="authorOrAdmin" class="btn btn--primary hidden">Dodaj artykuł</a>
          <a id="linkAdmin" href="/admin.html" style="display:none">Panel admina</a>
          <button id="btnLogout" type="button">Wyloguj</button>
        </div>
      </div>
    </nav>
  </div>
</header>`
}

/* Wstrzyknij nagłówek na początek <body> (raz) */
function injectHeader() {
  if (document.querySelector(".site-header")) return
  const wrapper = document.createElement("div")
  wrapper.innerHTML = buildHeader()
  document.body.prepend(wrapper.firstElementChild)
}

/* ?next= – dodaj powrót na bieżącą stronę do linków logowania/rejestracji */
function attachNextParam() {

  if (location.pathname.endsWith('/login.html') || location.pathname.endsWith('/register.html')) return

  const next = encodeURIComponent(location.pathname + location.search)
  const btnLogin = document.getElementById("btnLogin")
  const btnRegister = document.getElementById("btnRegister")
  if (btnLogin)    btnLogin.href = `/login.html?next=${next}`
  if (btnRegister) btnRegister.href = `/register.html?next=${next}`
}

/* Pobierz profil (jeśli zalogowany) */
async function getMe() {
  return await getProfile() // zwraca obiekt lub null
}

/* Zapobiegaj przeładowaniu, gdy klikamy link prowadzący na tę samą stronę */
function preventReloadOnSamePage(link) {
  if (!link) return
  link.addEventListener('click', (e) => {
    // Normalizujemy docelową ścieżkę linku i obecną ścieżkę
    const targetPath = new URL(link.getAttribute('href'), location.origin).pathname
    const currentPath = location.pathname
    if (targetPath === currentPath) {
      e.preventDefault() // już tu jesteśmy – nic nie rób
    }
  })
}

/* Zachowanie menu użytkownika, przełączenia widoczności, logout */
function wireUserMenu(me) {
  const btnLogin    = document.getElementById("btnLogin")
  const btnRegister = document.getElementById("btnRegister")
  const userMenu    = document.getElementById("userMenu")
  const userName    = document.getElementById("userName")
  const linkAdmin   = document.getElementById("linkAdmin")
  const adminNavBtn = document.getElementById("adminNavBtn")
  const btnLogout   = document.getElementById("btnLogout")
  const userToggle  = document.getElementById("userToggle")
  const dropdown    = document.getElementById("userDropdown")

  if (!btnLogin || !btnRegister || !userMenu) return

  // — ZAWSZE zamknij dropdown na starcie —
  if (dropdown) {
    dropdown.setAttribute("hidden", "")
    dropdown.style.display = "none"
    userToggle?.setAttribute("aria-expanded", "false")
  }

  if (me) {
    // zalogowany
    btnLogin.style.display = "none"
    btnRegister.style.display = "none"
    userMenu.style.display = ""

    userName.textContent = me.username || me.email || "Użytkownik"
    if (me.role === "admin") {
      if (linkAdmin)   linkAdmin.style.display = "block"
      if (adminNavBtn) adminNavBtn.style.display = "inline-flex"
    } else {
      if (linkAdmin)   linkAdmin.style.display = "none"
      if (adminNavBtn) adminNavBtn.style.display = "none"
    }

    // Zapobiegaj przeładowaniu, gdy już jesteśmy na admin.html
    preventReloadOnSamePage(adminNavBtn)
    preventReloadOnSamePage(linkAdmin)

    function closeDropdown() {
      if (!dropdown) return
      dropdown.setAttribute("hidden", "")
      dropdown.style.display = "none"
      userToggle?.setAttribute("aria-expanded", "false")
    }
    function openDropdown() {
      if (!dropdown) return
      dropdown.removeAttribute("hidden")
      dropdown.style.display = ""
      userToggle?.setAttribute("aria-expanded", "true")
    }

    // Toggle dropdowna
    userToggle?.addEventListener("click", (e) => {
      e.stopPropagation()
      const open = dropdown && !dropdown.hasAttribute("hidden")
      open ? closeDropdown() : openDropdown()
    })

    // Zamknij po kliknięciu poza menu
    document.addEventListener("click", (e) => {
      if (dropdown && !dropdown.hasAttribute("hidden") && !e.target.closest(".user-menu")) {
        closeDropdown()
      }
    })

    // Logout
    btnLogout?.addEventListener("click", async () => {
      try {
        await fetch(`${API_BASE}/api/auth/logout`, { method: "POST", credentials: "include" })
      } catch {}
      location.href = "/"
    })
  } else {
    // niezalogowany
    btnLogin.style.display = ""
    btnRegister.style.display = ""
    userMenu.style.display = "none"
    attachNextParam()
  }
}

/* Strażnik strony admina */
function guardAdminPage(me) {
  const isAdminPage = /\/admin\.html($|\?)/.test(location.pathname + location.search)
  if (!isAdminPage) return

  if (!me) {
    const next = encodeURIComponent(location.pathname + location.search)
    location.href = `/login.html?next=${next}`
    return
  }
  if (me.role !== "admin") {
    location.href = "/"
  }
}

/* Ustaw UI nagłówka w zależności od stanu zalogowania */
function setHeaderUI(me) {
  const loginBtn   = document.getElementById("btnLogin")
  const registerBtn= document.getElementById("btnRegister")
  const adminBtn   = document.getElementById("adminNavBtn")
  const userMenu   = document.getElementById("userMenu")
  const userName   = document.getElementById("userName")

  const isLogged = !!me
  const isAdmin  = me?.role === "admin"

  if (loginBtn)    loginBtn.style.display = isLogged ? "none" : ""
  if (registerBtn) registerBtn.style.display = isLogged ? "none" : ""
  if (userMenu)    userMenu.style.display   = isLogged ? "" : "none"
  if (userName)    userName.textContent     = isLogged ? (me.username || me.email) : ""
  if (adminBtn)    adminBtn.style.display   = isAdmin ? "" : "none"

  // obsługa elementów z data-role
  document.querySelectorAll("[data-role]").forEach(el => {
    const need = el.getAttribute("data-role")
    const visible =
      (need === "user" && isLogged) ||
      (need === "admin" && isAdmin) ||
      (need === "authorOrAdmin" && (me?.role === "author" || isAdmin))
    el.classList.toggle("hidden", !visible)
  })
}

/* Ogólny guard – używaj na stronach wymagających roli */
function guardPage(requiredRole = null, me = null) {
  if (!me) {
    const next = encodeURIComponent(location.pathname + location.search)
    location.href = `/login.html?next=${next}`
    return
  }
  if (!requiredRole) return
  const ok =
    requiredRole === "user" ||
    me.role === requiredRole ||
    (requiredRole === "authorOrAdmin" && (me.role === "author" || me.role === "admin"))
  if (!ok) location.href = "/"
}

/* Inicjalizacja */
document.addEventListener("DOMContentLoaded", async () => {
  injectHeader()
  attachNextParam()

  const me = await getMe()       // pobranie profilu (lub null)
  setHeaderUI(me)                // przestaw widoczność elementów
  guardAdminPage(me)             // zostaw – Twój istniejący guard admina
  wireUserMenu(me)               // menu użytkownika / logout
})


==================================
src\js\login.js v.1
==================================

// src/js/login.js
import { API_BASE } from './api.js'
import { toast, toastError } from './toast.js' // jeśli nie używasz toastów, usuń importy i wywołania

function isEmail(s) {
  return /^\S+@\S+\.\S+$/.test(String(s || '').trim())
}

function showError(msg) {
  const el = document.getElementById('error')
  if (el) {
    el.textContent = msg
    el.hidden = false
    el.style.display = ''
  }
  if (typeof toastError === 'function') toastError(msg)
}

function showSuccess(msg) {
  if (typeof toast === 'function') toast(msg, 'success')
}

/** Bezpieczne wyliczenie adresu docelowego po logowaniu */
function computeSafeRedirect(role) {
  const params = new URLSearchParams(location.search)
  let next = params.get('next') || '/'

  try {
    const url = new URL(next, location.origin)

    // 1) tylko ten sam origin
    if (url.origin !== location.origin) return '/'

    // 2) nigdy nie kieruj na login/register (by uniknąć pętli)
    const p = url.pathname.toLowerCase()
    if (p.endsWith('/login.html') || p.endsWith('/register.html')) return '/'

    // 3) jeśli next=/admin.html, ale user nie jest adminem → fallback na /
    if (p.endsWith('/admin.html') && role !== 'admin') return '/'

    // OK — zwróć ścieżkę (zachowaj parametry)
    return url.pathname + url.search + url.hash
  } catch {
    return '/'
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('loginForm')
  if (!form) return
  form.addEventListener('submit', onSubmit)
})

async function onSubmit(e) {
  e.preventDefault()

  const emailEl = document.getElementById('email')
  const passEl  = document.getElementById('password')
  const errorEl = document.getElementById('error')
  const submitBtn = e.submitter || document.querySelector('#loginForm button[type="submit"]')

  if (errorEl) errorEl.textContent = ''

  const email = emailEl?.value?.trim()
  const password = passEl?.value || ''

  // Walidacja frontowa
  if (!isEmail(email)) return showError('Podaj prawidłowy adres e-mail.')
  if (password.length < 6) return showError('Hasło musi mieć co najmniej 6 znaków.')

  if (submitBtn) submitBtn.disabled = true

  try {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({ email, password })
    })

    let data = {}
    try { data = await res.json() } catch {}

    if (!res.ok) {
      if (res.status === 429) return showError(data?.message || 'Zbyt wiele prób logowania. Spróbuj ponownie za kilka minut.')
      if (res.status === 400 || res.status === 401) return showError(data?.message || 'Nieprawidłowy e-mail lub hasło.')
      return showError(data?.message || `Błąd serwera (${res.status}).`)
    }

    showSuccess('Zalogowano pomyślnie.')

    // (opcjonalnie) sprawdź rolę — wykorzystamy do bezpiecznego redirectu
    let role = null
    try {
      const pRes = await fetch(`${API_BASE}/api/users/profile`, { credentials: 'include' })
      if (pRes.ok) {
        const p = await pRes.json()
        role = p?.role || null
      }
    } catch {}

    // —— BEZPIECZNY REDIRECT ——
    // Priorytet: ?next= (zweryfikowany), w przeciwnym razie:
    // admin → /admin.html, inni → /
    let target = computeSafeRedirect(role)
    if (!target || target === '/') {
      target = (role === 'admin') ? '/admin.html' : '/'
    }

    // nie zostawiaj login.html w historii
    setTimeout(() => { location.replace(target) }, 300)

  } catch {
    showError('Błąd połączenia z serwerem.')
  } finally {
    if (submitBtn) submitBtn.disabled = false
  }
}


==================================
src\js\main.js v.1
==================================

import { API_BASE } from './api.js'
const limit = 5
let totalPages = 1

let currentPage = 1
let q = ''
let sort = 'newest'

// === Elementy DOM ===
const container = document.getElementById('articles-container')
const pageInfo  = document.getElementById('page-info')
const prevBtn   = document.getElementById('prev')
const nextBtn   = document.getElementById('next')
const qInput    = document.getElementById('q')
const sortSel   = document.getElementById('sort')

// === Odczyt stanu z URL i wypełnienie kontrolek ===
function readStateFromUrl() {
  const p = new URLSearchParams(location.search)
  currentPage = Math.max(1, parseInt(p.get('page') || '1', 10))
  q = (p.get('q') || '').trim()
  sort = p.get('sort') || 'newest'
  if (qInput)  qInput.value = q
  if (sortSel) sortSel.value = sort
}

// === Zapis stanu do URL (bez przeładowania) ===
function syncUrl() {
  const p = new URLSearchParams()
  if (currentPage > 1) p.set('page', String(currentPage))
  if (q)               p.set('q', q)
  if (sort && sort !== 'newest') p.set('sort', sort)
  const newUrl = p.toString() ? `/?${p.toString()}` : '/'
  history.replaceState(null, '', newUrl)

  // NEW: zapamiętaj ostatni adres listy (z filtrami/stroną)
  try {
    sessionStorage.setItem('cms:lastListURL', newUrl)
  } catch {}
}

// === Render listy ===
function renderArticles(list) {
  if (!list || list.length === 0) {
    container.innerHTML = '<p>Brak artykułów.</p>'
    return
  }

  const html = list.map(a => {
    const href = `/article.html?id=${a._id}`
    const thumb = a.thumbnail ? `<img class="article-thumb" src="${API_BASE}/${a.thumbnail}" alt="">` : ''
    const excerpt = (a.content || '').slice(0, 180) + (a.content && a.content.length > 180 ? '…' : '')
    const meta = `
      <div class="article-meta">
        <span>👍 ${a.likesCount || 0}</span>
        <span>💬 ${a.commentCount || 0}</span>
      </div>`

    return `
      <article class="article-card">
        <a class="article-cover" href="${href}">${thumb}</a>
        <div class="article-body">
          <h2 class="article-title"><a href="${href}">${a.title}</a></h2>
          <p class="article-excerpt">${excerpt}</p>
          ${meta}
        </div>
      </article>
    `
  }).join('')

  container.innerHTML = html
}

// === Paginacja UI ===
function updatePaginationUI() {
  pageInfo.textContent = `Strona ${currentPage} z ${totalPages}`
  prevBtn.disabled = currentPage <= 1
  nextBtn.disabled = currentPage >= totalPages

  const wrap = document.getElementById('pagination')
  if (wrap) wrap.style.display = totalPages > 1 ? '' : 'none'
}

// === Pobranie listy ===
async function loadArticles(page = 1) {
  container.innerHTML = '<p>Ładowanie…</p>'
  pageInfo.textContent = ''

  const query = new URLSearchParams({
    page: String(page),
    limit: String(limit),
    ...(q ? { q } : {}),
    ...(sort ? { sort } : {})
  })

  try {
    const res = await fetch(`${API_BASE}/api/articles?${query.toString()}`, {
      method: 'GET',
      credentials: 'include'
    })
    const data = await res.json()
    if (!res.ok) throw new Error(data?.message || `Błąd ${res.status}`)

    const articles = data.articles || []
    const total = Number(data.total || 0)
    const newTotalPages = Math.max(1, Math.ceil(total / limit))

    // --- PRZYPADKI KRAWĘDZIOWE PO USUNIĘCIU / FILTRACH ---

    // 1) Nie ma żadnych artykułów w ogóle (total=0)
    if (total === 0) {
      currentPage = 1
      totalPages = 1
      container.innerHTML = '<p>Brak artykułów.</p>'
      updatePaginationUI()
      // dopnij czysty URL (bez page), ale zachowaj q/sort
      syncUrl()
      return
    }

    // 2) Bieżąca strona > liczby stron (np. byłeś na page=2 i ostatni wpis usunięto)
    if (page > newTotalPages) {
      currentPage = newTotalPages
      totalPages = newTotalPages
      // zaktualizuj URL, a potem pobierz jeszcze raz już z poprawną stroną
      syncUrl()
      await loadArticles(currentPage)
      return
    }

    // --- normalny render ---
    totalPages = newTotalPages
    renderArticles(articles)
    updatePaginationUI()

  } catch (err) {
    container.innerHTML = `<p style="color:crimson">${err.message || 'Błąd ładowania'}</p>`
    pageInfo.textContent = ''
    prevBtn.disabled = true
    nextBtn.disabled = true
  }
}


// === Handlery paginacji ===
prevBtn.addEventListener('click', () => {
  if (currentPage > 1) {
    currentPage--
    syncUrl()
    loadArticles(currentPage)
  }
})
nextBtn.addEventListener('click', () => {
  if (currentPage < totalPages) {
    currentPage++
    syncUrl()
    loadArticles(currentPage)
  }
})

// === Filtry ===
let qTimer = null
qInput.addEventListener('input', () => {
  q = qInput.value.trim()
  if (qTimer) clearTimeout(qTimer)
  qTimer = setTimeout(() => {
    currentPage = 1
    syncUrl()
    loadArticles(currentPage)
  }, 300)
})

sortSel.addEventListener('change', () => {
  sort = sortSel.value
  currentPage = 1
  syncUrl()
  loadArticles(currentPage)
})

// === Odśwież po powrocie z historii (BFCache / back-forward) ===
window.addEventListener('pageshow', (e) => {
  // e.persisted — safari/firefox BFCache
  // performance.navigation — wykrycie back/forward w nowoczesnych przeglądarkach
  const nav = performance.getEntriesByType && performance.getEntriesByType('navigation')[0]
  if (e.persisted || (nav && nav.type === 'back_forward')) {
    readStateFromUrl()
    loadArticles(currentPage)
  }
})

// Fallback — zmiana stanu historii (np. ręczne cofnięcie/naprzód)
window.addEventListener('popstate', () => {
  readStateFromUrl()
  loadArticles(currentPage)
})

// === Start ===
readStateFromUrl()
syncUrl()
loadArticles(currentPage)


==================================
src\js\nav.js v.1
==================================

import { API_BASE } from './api.js'

// helper: pobierz parametr z URL
function getParam(name) {
    const url = new URL(window.location.href)
    return url.searchParams.get(name)
}

// Ustal „next” przy klikaniu Logowanie/Rejestracja
function attachNextParam() {
    const next = encodeURIComponent(location.pathname + location.search)
    const login = document.getElementById("btnLogin")
    const register = document.getElementById("btnRegister")
    if (login)    login.href = `/login.html?next=${next}`
    if (register) register.href = `/register.html?next=${next}`
}

// Pokaż/ukryj menu zależnie od sesji
async function hydrateUserMenu() {
    const btnLogin = document.getElementById("btnLogin")
    const btnRegister = document.getElementById("btnRegister")
    const userMenu = document.getElementById("userMenu")
    const userName = document.getElementById("userName")
    const linkAdmin = document.getElementById("linkAdmin")
    const btnLogout = document.getElementById("btnLogout")
    const userToggle = document.getElementById("userToggle")
    const dropdown = document.getElementById("userDropdown")

    // brak elementów – nic nie robimy
    if (!btnLogin || !btnRegister || !userMenu) return

    try {
        const res = await fetch(`${API_BASE}/api/users/profile`, { credentials: "include" })
        if (!res.ok) throw new Error()
        const me = await res.json()

        // zalogowany
        btnLogin.style.display = "none"
        btnRegister.style.display = "none"
        userMenu.style.display = ""

        userName.textContent = me.username || me.email || "Użytkownik"
        if (me.role === "admin") linkAdmin.style.display = "block"

        // dropdown toggle
        userToggle.addEventListener("click", () => {
            const open = dropdown.hasAttribute("hidden") ? false : true
            if (open) { dropdown.setAttribute("hidden", ""); userToggle.setAttribute("aria-expanded","false") }
            else { dropdown.removeAttribute("hidden"); userToggle.setAttribute("aria-expanded","true") }
        })

        // wylogowanie
        btnLogout.addEventListener("click", async () => {
            await fetch(`${API_BASE}/api/auth/logout`, { method: "POST", credentials: "include" })
            location.href = "/" // powrót na stronę główną
        })
    } catch {
        // niezalogowany
        btnLogin.style.display = ""
        btnRegister.style.display = ""
        userMenu.style.display = "none"
        attachNextParam()
    }
}

document.addEventListener("DOMContentLoaded", () => {
    hydrateUserMenu()
    attachNextParam()
})


==================================
src\js\new-article.js v.1
==================================

import { getProfile, API_BASE } from './api.js'
import { toast, toastError } from './toast.js'

// Guard: tylko author/admin
document.addEventListener('DOMContentLoaded', async () => {
  try {
    const me = await getProfile()
    if (!me || !['author', 'admin'].includes(me.role)) {
      toastError('Brak uprawnień.')
      location.href = '/'
      return
    }
    init()
  } catch {
    toastError('Błąd autoryzacji.')
    location.href = '/'
  }
})

const pageUrl = new URL(location.href)
const articleId = pageUrl.searchParams.get('id')

const form = document.getElementById('article-form')
const titleEl = document.getElementById('title')
const contentEl = document.getElementById('content')
const imagesInput = document.getElementById('images')
const preview = document.getElementById('preview')
const existingWrap = document.getElementById('existing-images')
const submitBtn = document.getElementById('submit-btn')

const MAX_FILES = 5
const MAX_SIZE = 5 * 1024 * 1024 // 5MB

function init() {
  // <form novalidate> żeby HTML nie blokował własnych komunikatów
  if (form && !form.hasAttribute('novalidate')) form.setAttribute('novalidate', '')

  if (articleId) {
    const pt = document.getElementById('page-title')
    if (pt) pt.textContent = 'Edytuj artykuł'
    loadArticleForEdit()
  }

  if (imagesInput) imagesInput.addEventListener('change', handleFilesPreview)
  if (form) form.addEventListener('submit', onSubmit)
}

function handleFilesPreview(e) {
  if (preview) preview.innerHTML = ''
  const files = Array.from((e && e.target && e.target.files) ? e.target.files : [])

  if (files.length > MAX_FILES) {
    toastError(`Maksymalnie ${MAX_FILES} plików.`)
    if (imagesInput) imagesInput.value = ''
    return
  }

  for (let i = 0; i < files.length; i++) {
    const f = files[i]
    if (!f.type || !f.type.startsWith('image/')) {
      toastError('Dozwolone tylko obrazy.')
      if (imagesInput) imagesInput.value = ''
      return
    }
    if (f.size > MAX_SIZE) {
      toastError('Każdy obraz ≤ 5MB.')
      if (imagesInput) imagesInput.value = ''
      return
    }
    const objUrl = URL.createObjectURL(f)
    const img = document.createElement('img')
    img.src = objUrl
    img.alt = f.name
    if (preview) preview.appendChild(img)
  }
}

async function loadArticleForEdit() {
  try {
    const res = await fetch(`${API_BASE}/api/articles/${articleId}`, { credentials: 'include' })
    const data = await res.json()
    if (!res.ok) throw new Error((data && data.message) || `Błąd ${res.status}`)

    const a = data.article || data
    if (titleEl) titleEl.value = a.title || ''
    if (contentEl) contentEl.value = a.content || ''

    if (Array.isArray(a.images) && a.images.length && existingWrap) {
      existingWrap.style.display = ''
      existingWrap.innerHTML = [
        '<p>Istniejące obrazy (zaznacz, aby usunąć podczas zapisu):</p>',
        '<div class="existing-grid">',
        a.images.map((p, i) => {
          const src = `${API_BASE}/${String(p).replace(/^\/+/, '')}`
          return (
            '<label class="ex-item">' +
              `<input type="checkbox" name="removeImages" value="${String(p)}">` +
              `<img src="${src}" alt="img${i}">` +
            '</label>'
          )
        }).join(''),
        '</div>'
      ].join('')
    }
  } catch (err) {
    toastError((err && err.message) ? err.message : 'Nie udało się wczytać artykułu do edycji.')
  }
}

async function onSubmit(e) {
  e.preventDefault()
  if (submitBtn) submitBtn.disabled = true

  try {
    const title = (titleEl && titleEl.value ? titleEl.value : '').trim()
    const content = (contentEl && contentEl.value ? contentEl.value : '').trim()

    if (title.length < 5) throw new Error('Tytuł musi mieć min. 5 znaków.')
    if (content.length < 20) throw new Error('Treść musi mieć min. 20 znaków.')

    const fd = new FormData()
    fd.append('title', title)
    fd.append('content', content)

    // obrazy do usunięcia (przy edycji)
    if (existingWrap) {
      const checks = existingWrap.querySelectorAll('input[name="removeImages"]:checked')
      checks.forEach(chk => {
        if (chk && chk.value != null) fd.append('removeImages', chk.value)
      })
    }

    // nowe pliki
    const files = Array.from(imagesInput && imagesInput.files ? imagesInput.files : [])
    if (files.length > MAX_FILES) throw new Error(`Maksymalnie ${MAX_FILES} plików.`)
    for (let i = 0; i < files.length; i++) {
      const f = files[i]
      if (!f.type || !f.type.startsWith('image/')) throw new Error('Dozwolone tylko obrazy (MIME).')
      if (f.size > MAX_SIZE) throw new Error('Każdy obraz ≤ 5MB.')
      fd.append('images', f)
    }

    const method = articleId ? 'PUT' : 'POST'
    const endpoint = articleId
      ? `${API_BASE}/api/articles/${articleId}`
      : `${API_BASE}/api/articles`

    const res = await fetch(endpoint, { method, credentials: 'include', body: fd })
    let data = {}
    try { data = await res.json() } catch {}

    if (res.status === 403) throw new Error((data && data.message) || 'Brak uprawnień.')
    if (!res.ok) throw new Error((data && data.message) || `Błąd ${res.status}`)

    const id = (data && data.article && data.article._id) ? data.article._id : (articleId || '')
    if (id) {
      location.href = `/article.html?id=${id}`
    } else {
      location.href = '/'
    }
  } catch (err) {
    toastError((err && err.message) ? err.message : 'Błąd zapisu.')
  } finally {
    if (submitBtn) submitBtn.disabled = false
  }
}


==================================
src\js\register.js v.1
==================================

// js/register.js v.2
import { API_BASE } from './api.js'
import { toast, toastError } from './toast.js'

document.getElementById("registerForm").addEventListener("submit", async (e) => {
    e.preventDefault()

    const username = document.getElementById("username").value
    const email = document.getElementById("email").value
    const password = document.getElementById("password").value
    const role = document.getElementById("role").value
    const errorEl = document.getElementById("error")
    const successEl = document.getElementById("success")
    const submitBtn = e.target.querySelector('button[type="submit"]')

    // Czyść poprzednie komunikaty
    if (errorEl) errorEl.textContent = ''
    if (successEl) successEl.textContent = ''
    if (submitBtn) submitBtn.disabled = true

    try {
        const res = await fetch(`${API_BASE}/api/auth/register-pending`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ username, email, password, role })
        })

        const data = await res.json()

        if (!res.ok) {
            // Błąd z backendu
            const errorMsg = data.message || "Błąd rejestracji"
            if (errorEl) errorEl.textContent = errorMsg
            toastError(errorMsg)
            return
        }

        // Sukces
        const successMsg = data.message || "Wniosek rejestracyjny został przesłany do zatwierdzenia."
        if (successEl) successEl.textContent = successMsg
        toast(successMsg, 'success')
        
        // Resetuj formularz
        e.target.reset()

        // NIE PRZEKIEROWUJ AUTOMATYCZNIE - użytkownik zostaje na stronie rejestracji
        // użytkownik może teraz zobaczyć komunikat sukcesu

    } catch (err) {
        const errorMsg = "Błąd połączenia z serwerem"
        if (errorEl) errorEl.textContent = errorMsg
        toastError(errorMsg)
    } finally {
        if (submitBtn) submitBtn.disabled = false
    }
})

==================================
src\js\toast.js v.1
==================================

// src/js/toast.js

// --- zwykłe toasty (na dole ekranu) ---
function ensureToastRoot() {
  let root = document.getElementById('toast-root')
  if (!root) {
    root = document.createElement('div')
    root.id = 'toast-root'
    root.className = 'toast-layer'
    document.body.appendChild(root)
  } else {
    root.classList.add('toast-layer')
  }
  return root
}

export function toast(message, type = 'info', timeout = 3000) {
  const root = ensureToastRoot()
  const el = document.createElement('div')
  el.className = 'toast'

  const map = {
    success: 'toast--success',
    error: 'toast--error',
    info: 'toast--info',
    warn: 'toast--warn',
    warning: 'toast--warning'
  }
  el.classList.add(map[type] || map.info)

  el.innerHTML = `<span class="toast-msg">${message}</span>`
  root.appendChild(el)

  const remove = () => {
    el.classList.add('toast--hide')
    el.addEventListener('transitionend', () => el.remove(), { once: true })
  }
  const t = setTimeout(remove, timeout)
  el.addEventListener('click', () => { clearTimeout(t); remove() })
}

export function toastError(message, timeout = 4000) {
  toast(message, 'error', timeout)
}

// --- confirm modal (wyśrodkowany w viewport, z overlay) ---
export function confirmToast({
  message,
  okText = 'OK',
  cancelText = 'Anuluj',
  timeout = 0 // 0 = bez auto-zamykania
} = {}) {
  return new Promise(resolve => {
    const overlay = document.createElement('div')
    overlay.className = 'toast-overlay'

    const modal = document.createElement('div')
    modal.className = 'toast toast--confirm'
    modal.setAttribute('role', 'dialog')
    modal.setAttribute('aria-modal', 'true')

    modal.innerHTML = `
      <div class="toast__msg">${message || 'Potwierdzić?'}</div>
      <div class="toast__actions">
        <button type="button" class="btn btn--primary toast__ok">${okText}</button>
        <button type="button" class="btn btn--ghost toast__cancel">${cancelText}</button>
      </div>
    `

    document.body.appendChild(overlay)
    document.body.appendChild(modal)

    const okBtn = modal.querySelector('.toast__ok')
    const cancelBtn = modal.querySelector('.toast__cancel')
    const prevActive = document.activeElement
    okBtn?.focus()

    const cleanup = (val) => {
      modal.classList.add('toast--hide')
      overlay.classList.add('toast-overlay--hide')
      const done = () => {
        modal.remove()
        overlay.remove()
        prevActive && prevActive.focus?.()
        resolve(val)
      }
      let left = 0
      const onEnd = () => { if (++left === 2) done() }
      modal.addEventListener('transitionend', onEnd, { once: true })
      overlay.addEventListener('transitionend', onEnd, { once: true })
      // fallback gdyby nie było transitionend
      setTimeout(done, 250)
    }

    const onKey = (e) => {
      if (e.key === 'Escape') cleanup(false)
      if (e.key === 'Enter')  cleanup(true)
    }

    okBtn?.addEventListener('click', () => cleanup(true))
    cancelBtn?.addEventListener('click', () => cleanup(false))
    overlay.addEventListener('click', () => cleanup(false))
    document.addEventListener('keydown', onKey)

    // auto-close (jeśli ustawiono)
    let timer = null
    if (timeout > 0) timer = setTimeout(() => cleanup(false), timeout)

    // posprzątaj nasłuch klawiatury przy zamknięciu
    const stopKeys = () => document.removeEventListener('keydown', onKey)
    modal.addEventListener('transitionend', stopKeys, { once: true })
  })
}


==================================
src\login.html v.1
==================================

<!DOCTYPE html>
<html lang="pl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/main.css?cache_bust=123">
    <title>Logowanie</title>
</head>

<body>
    <main class="login-container">
        <h1>Zaloguj się</h1>
        <form id="loginForm" novalidate>
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>

            <label for="password">Hasło:</label>
            <input type="password" id="password" name="password" required>

            <button type="submit">Zaloguj</button>
        </form>
        <p id="error" class="error" aria-live="polite"></p>
    </main>

    <script type="module" src="./js/nav.js?cache_bust=123"></script>
    <script type="module" src="./js/header.js?cache_bust=123"></script>
    <script type="module" src="./js/login.js?cache_bust=123"></script>
</body>

</html>

==================================
src\new-article.html v.1
==================================

<!DOCTYPE html>
<html lang="pl">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./css/main.css?cache_bust=123">
    <title>Artykuł</title>
</head>

<body>
    <main class="container">
        <h1 id="page-title">Nowy artykuł</h1>

        <form id="article-form" enctype="multipart/form-data" class="form">
            <label>Tytuł
                <input id="title" name="title" type="text" />
            </label>

            <label>Treść
                <textarea id="content" name="content" rows="10"></textarea>
            </label>

            <!-- istniejące obrazy przy edycji -->
            <div id="existing-images" class="existing-images" style="display:none"></div>

            <label>Obrazy (max 5, JPG/PNG/WebP, ≤ 5MB każdy)
                <input id="images" name="images" type="file" accept="image/*" multiple />
            </label>

            <!-- podgląd nowych plików -->
            <div id="preview" class="image-preview"></div>

            <div id="form-error" class="form-error" style="display:none;"></div>
            <div class="actions">
                <button type="submit" class="btn btn--primary" id="submit-btn">Zapisz</button>
                <a href="/" class="btn btn--ghost">Anuluj</a>
            </div>
        </form>
    </main>

    <script type="module" src="./js/nav.js?cache_bust=123"></script>
    <script type="module" src="./js/header.js?cache_bust=123"></script>
    <script type="module" src="./js/new-article.js?cache_bust=123"></script>
</body>

</html>

==================================
src\register.html v.1
==================================

<!DOCTYPE html>
<html lang="pl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/main.css?cache_bust=123">
    <title>Rejestracja</title>
</head>

<body>
    <main class="register-container">
        <h1>Rejestracja</h1>
        <form id="registerForm">
            <label for="username">Nazwa użytkownika:</label>
            <input type="text" id="username" name="username" required>

            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>

            <label for="password">Hasło:</label>
            <input type="password" id="password" name="password" required>

            <label for="role">Rola:</label>
            <select id="role" name="role" required>
                <option value="user">Użytkownik</option>
                <option value="author">Autor</option>
            </select>

            <button type="submit">Zarejestruj</button>
        </form>
        <p id="error" class="error"></p>
        <p id="success" class="success"></p>
    </main>

    <script type="module" src="./js/nav.js?cache_bust=123"></script>
    <script type="module" src="./js/header.js?cache_bust=123"></script>
    <script type="module" src="./js/register.js?cache_bust=123"></script>
</body>

</html>

==================================
src\scss\components\_admin-panel.scss v.1
==================================

// SCSS: _admin-panel.scss

.admin__search {
    width: 100%;
    max-width: 300px;
    padding: 0.5em;
    margin-bottom: 1em;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
}

.pagination {
    margin-top: 1.5em;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1em;

    &__btn {
        padding: 0.4em 1em;
        font-size: 0.9rem;
        background-color: var(--color-primary);
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;

        &:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
    }

    &__info {
        font-weight: bold;
    }
}

==================================
src\scss\components\_comments.scss v.1
==================================



==================================
src\scss\components\_toast.scss v.1
==================================

/* ================================
   Toasty (dół ekranu) + Confirm modal
   ================================ */

/* Warstwa na toasty – pełna szerokość, dół ekranu, centrowanie */
.toast-layer {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 24px;
    display: flex;
    flex-direction: column;
    /* układ w kolumnie */
    align-items: center;
    /* centrowanie w poziomie */
    gap: 10px;
    /* odstęp między wieloma toastami */
    z-index: 9999;
    pointer-events: none;
    /* klikamy tylko w same toasty */
}

/* Bazowy toast (pojawia się na dole, w .toast-layer) */
.toast {
    pointer-events: auto;
    display: inline-block;
    box-sizing: border-box;
    max-width: min(92vw, 520px);
    width: max-content;
    /* dopasuj do treści, ale nie rozciągaj */
    padding: 12px 16px;
    border-radius: 6px;
    background: #fff;
    border: 2px solid #ccc;
    box-shadow: 0 6px 24px rgba(0, 0, 0, .12);
    will-change: transform, opacity;
    transform: translateY(0);
    opacity: 1;
    transition: transform .18s ease, opacity .18s ease;

    &.toast--hide {
        transform: translateY(8px);
        opacity: 0;
    }

    &--success {
        border-color: #2e7d32;
    }

    &--error {
        border-color: #c62828;
    }

    &--info {
        border-color: #1565c0;
    }

    &--warn,
    &--warning {
        border-color: #ef6c00;
    }

    .toast__actions {
        margin-top: 8px;
        display: flex;
        gap: 8px;
        justify-content: flex-end;
    }
}

/* ================================
   Confirm modal (wyśrodkowany w viewport)
   ================================ */

/* Przyciemnienie tła */
.toast-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, .18);
    backdrop-filter: blur(1px);
    z-index: 10000;
    opacity: 1;
    transition: opacity .18s ease;

    &.toast-overlay--hide {
        opacity: 0;
    }
}

/* Sam modal potwierdzenia */
.toast--confirm {
    position: fixed;
    top: 50%;
    left: 50%;
    /* centrowanie względem środka elementu */
    transform: translate(-50%, -50%);
    z-index: 10001;
    /* nad overlay */
    max-width: min(92vw, 520px);
    width: max-content;
    box-sizing: border-box;
    padding: 14px 16px;
    border-radius: 8px;
    background: #fff;
    /* własne tło (nie dziedziczy z .toast) */
    border: 2px solid #1565c0;
    /* delikatny akcent */
    box-shadow: 0 10px 32px rgba(0, 0, 0, .20);
    will-change: transform, opacity;
    transition: transform .18s ease, opacity .18s ease;
    opacity: 1;

    &.toast--hide {
        transform: translate(-50%, calc(-50% + 8px));
        opacity: 0;
    }

    .toast__msg {
        color: #111;
        line-height: 1.45;
    }

    .toast__actions {
        margin-top: 12px;
        display: flex;
        gap: 8px;
        justify-content: flex-end;

        .btn {
            font-size: .95rem;
            padding: .5rem .9rem;
            line-height: 1.1;
            cursor: pointer;
        }

        .btn.btn--primary {
            /* zachowaj swoje style globalne przycisków; to tylko fallback */
            background: #1565c0;
            color: #fff;
            border: 1px solid #0d47a1;
        }

        .btn.btn--ghost {
            background: transparent;
            color: #111;
            border: 1px solid #bbb;
        }

        .btn.btn--danger {
            background: #c62828;
            color: #fff;
            border: 1px solid #8e0000;
        }
    }
}

/* ================================
   Dodatki UX
   ================================ */

/* Gdy system preferuje mniej animacji */
@media (prefers-reduced-motion: reduce) {

    .toast,
    .toast--confirm,
    .toast-overlay {
        transition: none !important;
    }
}

/* Na bardzo wąskich ekranach — minimalne marginesy od krawędzi */
@media (max-width: 420px) {
    .toast-layer {
        bottom: 16px;
    }

    .toast {
        max-width: calc(100vw - 24px);
    }

    .toast--confirm {
        max-width: calc(100vw - 24px);
    }
}

==================================
src\scss\main.scss v.1
==================================

@use "./components/toast";
@use "./components/comments";
@use "./components/admin-panel";

* {
    margin: 0;
    padding: 0;
    border: 0;
    line-height: 1.4;
    vertical-align: baseline;
    text-decoration: none;
    outline: 0;
    box-sizing: border-box;
    background-color: transparent;
}

html {
    scroll-behavior: smooth;
}

body {
    font-family: 'Helvetica Neue', sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 40px;
    background-color: #fefefe;
    color: #222;
}

.main-wrapper {
    max-width: 900px;
    margin: 40px auto;
    padding: 0 20px;
}

.article-box {
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 20px;
    background: #fff;

    h2 {
        font-size: 1.6rem;
        margin-bottom: 0.5em;
    }

    p {
        font-size: 1.05rem;
        color: #444;
    }

    a {
        text-decoration: none;
        color: #0077cc;

        &:hover {
            text-decoration: underline;
        }
    }
}

.pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 30px;

    button {
        padding: 8px 16px;
        font-size: 1rem;
        cursor: pointer;
    }
}

.article-wrapper {
    max-width: 800px;
    margin: 0 auto;
}

.article-image {
    width: 100%;
    height: auto;
    margin: 20px 0;
    border-radius: 8px;
}

#article-title {
    font-size: 2.4rem;
    margin-bottom: 0.2em;
}

#article-meta {
    font-size: 0.9rem;
    color: #888;
    margin-bottom: 1em;
}

.article-content {
    font-size: 1.1rem;
}

.meta-info {
    font-size: 0.9rem;
    color: #666;
    margin-top: 8px;
}

.article-row {
    display: flex;
    gap: 16px;
    align-items: flex-start;
}

.thumb {
    width: 120px;
    height: 90px;
    object-fit: cover;
    border-radius: 6px;
    flex-shrink: 0;
}

.article-text {
    flex: 1;
}

.thumb[src$="placeholder.png"] {
    opacity: 0.2;
    filter: grayscale(70%);
}

.comments-section {
    margin-top: 40px;

    h3 {
        font-size: 1.4rem;
        margin-bottom: 1rem;
    }

    .comment {
        padding: 12px;
        border-bottom: 1px solid #ddd;

        p {
            margin: 0 0 4px;
        }

        .comment-meta {
            font-size: 0.85rem;
            color: #888;
        }
    }
}

#comment-form-section {
    margin-top: 2rem;
    padding: 1rem;
    border-top: 1px solid #ddd;

    h3 {
        margin-bottom: 1rem;
        font-size: 1.25rem;
        color: #333;
    }

    form {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;

        textarea {
            resize: vertical;
            min-height: 100px;
            padding: 0.75rem;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-family: inherit;
        }

        button {
            align-self: flex-start;
            padding: 0.5rem 1.25rem;
            font-size: 1rem;
            background-color: #0077cc;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;

            &:hover {
                background-color: #005fa3;
            }
        }

        #comment-error {
            color: red;
            font-size: 0.9rem;
            display: none;
        }
    }
}

/* --- Admin: tabela wniosków --- */
.container {
    max-width: 960px;
    margin: 0 auto;
    padding: 24px 16px;
}

#pendingTable {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    overflow: hidden;
}

#pendingTable thead th {
    text-align: left;
    font-weight: 600;
    padding: 12px 16px;
    background: #f8fafc;
    border-bottom: 1px solid #e5e7eb;
    font-size: 14px;
    letter-spacing: .2px;
}

#pendingTable tbody td {
    padding: 12px 16px;
    border-bottom: 1px solid #f1f5f9;
    vertical-align: middle;
    font-size: 14px;
}

#pendingTable tbody tr:last-child td {
    border-bottom: 0;
}

#pendingTable tbody tr:hover {
    background: #f9fafb;
}

/* Przyciski akcji */
#pendingTable button {
    appearance: none;
    border: 1px solid #d0d7de;
    background: #fff;
    color: #111827;
    border-radius: 10px;
    padding: 8px 12px;
    font-size: 14px;
    cursor: pointer;
    transition: background .15s ease, border-color .15s ease, transform .05s ease;
}

#pendingTable button:active {
    transform: translateY(1px);
}

#pendingTable .btn-approve {
    border-color: #2e7d32;
    color: #2e7d32;
    font-weight: 600;
}

#pendingTable .btn-approve:hover {
    background: #e8f5e9;
}

#pendingTable .btn-reject {
    border-color: #c62828;
    color: #c62828;
    font-weight: 600;
    margin-left: 8px;
}

#pendingTable .btn-reject:hover {
    background: #ffebee;
}

/* Status (gdyby był używany) */
#status {
    margin: 12px 0 16px;
    padding: 10px 12px;
    border-radius: 10px;
    background: #f8fafc;
    border: 1px solid #e5e7eb;
    font-size: 14px;
}

/* Responsywność — niewielkie ekrany: miękki scroll poziomy */
@media (max-width: 640px) {
    .container {
        padding: 16px 12px;
    }

    #pendingTable {
        display: block;
        overflow-x: auto;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
    }

    #pendingTable thead,
    #pendingTable tbody,
    #pendingTable tr {
        width: max-content;
    }
}

.site-header {
    position: sticky;
    top: 0;
    z-index: 50;
    background: #ffffffcc;
    backdrop-filter: blur(6px);
    border-bottom: 1px solid #e5e7eb;
}

.nav-wrap {
    max-width: 1100px;
    margin: 0 auto;
    padding: 10px 16px;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.brand {
    font-weight: 700;
    text-decoration: none;
    color: #111827;
}

.nav-actions {
    display: flex;
    align-items: center;
    gap: 10px;
}

.btn {
    appearance: none;
    border: 1px solid #d0d7de;
    background: #fff;
    color: #111;
    border-radius: 10px;
    padding: 8px 12px;
    font-size: 14px;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    transition: background .15s ease, border-color .15s ease;

    &:hover {
        background: #f6f8fa;
    }
}

.btn--primary {
    background: #1565c0;
    border-color: #1565c0;
    color: #fff;

    &:hover {
        background: #1156a4;
        border-color: #1156a4;
    }
}

.btn--ghost {
    background: #fff;
}

.user-menu {
    position: relative;
}

.user-chip {
    @extend .btn;

    .user-avatar {
        margin-left: 6px;
    }
}

.user-dropdown {
    position: absolute;
    right: 0;
    top: calc(100% + 6px);
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, .08);
    min-width: 180px;
    padding: 8px;
    display: grid;
    gap: 4px;
}

.user-dropdown a,
.user-dropdown button {
    text-align: left;
    border: 0;
    background: transparent;
    padding: 8px 10px;
    border-radius: 8px;
    font-size: 14px;
    color: #111;
    cursor: pointer;
    text-decoration: none;

    &:hover {
        background: #f6f8fa;
    }
}

/* === Rejestracja (dopasowane do register.html) === */
.register-container {
    max-width: 560px;
    margin: 32px auto;
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, .04);

    h1 {
        font-size: 1.6rem;
        margin-bottom: 16px;
        color: #111;
    }
}

#registerForm {
    display: grid;
    gap: 14px;

    label {
        font-size: 0.95rem;
        color: #333;
    }

    input[type="text"],
    input[type="email"],
    input[type="password"],
    select {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #d0d7de;
        border-radius: 10px;
        background: #fff;
        color: #111;
        font-size: 1rem;
        transition: border-color .15s ease, box-shadow .15s ease;

        &::placeholder {
            color: #9aa0a6;
        }

        &:focus {
            border-color: #1565c0;
            box-shadow: 0 0 0 3px rgba(21, 101, 192, .15);
            outline: none;
        }
    }

    button[type="submit"] {
        align-self: start;
        padding: 10px 16px;
        font-size: 1rem;
        border-radius: 10px;
        border: 1px solid #1565c0;
        background: #1565c0;
        color: #fff;
        cursor: pointer;
        transition: background .15s ease, border-color .15s ease, transform .05s ease;

        &:hover {
            background: #1156a4;
            border-color: #1156a4;
        }

        &:active {
            transform: translateY(1px);
        }

        &:disabled {
            opacity: .6;
            cursor: not-allowed;
        }
    }
}

/* Komunikaty pod formularzem */
#error,
.success {
    margin-top: 10px;
    font-size: 0.95rem;
}

#error {
    color: #c62828;
}

/* czerwony */
.success {
    color: #2e7d32;
}

/* zielony */

/* Mobile */
@media (max-width: 520px) {
    .register-container {
        margin: 20px 12px;
        padding: 16px;
    }
}

/* === Logowanie (analogicznie do register) === */
.login-container {
    max-width: 560px;
    margin: 32px auto;
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, .04);

    h1 {
        font-size: 1.6rem;
        margin-bottom: 16px;
        color: #111;
    }
}

#loginForm {
    display: grid;
    gap: 14px;

    label {
        font-size: 0.95rem;
        color: #333;
    }

    input[type="email"],
    input[type="password"] {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #d0d7de;
        border-radius: 10px;
        background: #fff;
        color: #111;
        font-size: 1rem;
        transition: border-color .15s ease, box-shadow .15s ease;

        &::placeholder {
            color: #9aa0a6;
        }

        &:focus {
            border-color: #1565c0;
            box-shadow: 0 0 0 3px rgba(21, 101, 192, .15);
            outline: none;
        }
    }

    .form-row {
        display: grid;
        gap: 6px;
    }

    button[type="submit"] {
        align-self: start;
        padding: 10px 16px;
        font-size: 1rem;
        border-radius: 10px;
        border: 1px solid #1565c0;
        background: #1565c0;
        color: #fff;
        cursor: pointer;
        transition: background .15s ease, border-color .15s ease, transform .05s ease;

        &:hover {
            background: #1156a4;
            border-color: #1156a4;
        }

        &:active {
            transform: translateY(1px);
        }

        &:disabled {
            opacity: .6;
            cursor: not-allowed;
        }
    }
}

/* Komunikaty pod formularzem (dopasuj do swoich ID) */
#loginError,
#loginSuccess,
#login-error,
#login-success,
#error,
.success {
    margin-top: 10px;
    font-size: 0.95rem;
}

#loginError,
#login-error,
#error {
    color: #c62828;
}

/* czerwony */

#loginSuccess,
#login-success,
.success {
    color: #2e7d32;
}

/* zielony */

/* Mobile */
@media (max-width: 520px) {
    .login-container {
        margin: 20px 12px;
        padding: 16px;
    }
}

[hidden] {
    display: none !important;
}

.hidden {
    display: none !important;
}

.article-card {
    display: grid;
    grid-template-columns: 160px 1fr;
    gap: 16px;
    padding: 12px;
    border: 1px solid #ececec;
    border-radius: 12px;
    margin-bottom: 12px;
    background: #fff;
}

.article-cover img.article-thumb {
    width: 160px;
    height: 110px;
    object-fit: cover;
    border-radius: 8px;
    display: block;
}

.article-title {
    margin: 0 0 6px;
    font-size: 1.1rem;
}

.article-excerpt {
    margin: 0 0 8px;
    color: #555;
}

.article-meta {
    display: flex;
    gap: 12px;
    font-size: .9rem;
    color: #666;
}

@media (max-width: 640px) {
    .article-card {
        grid-template-columns: 1fr;
    }

    .article-cover img.article-thumb {
        width: 100%;
        height: 180px;
    }
}

.article-gallery {
    display: grid;
    gap: 8px;
    grid-template-columns: 1fr;
    margin: 12px 0;
}

.article-gallery .gallery-main img {
    width: 100%;
    height: auto;
    border-radius: 8px;
    display: block;
}

.article-gallery .thumbs {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

.article-gallery .thumbs img {
    width: 96px;
    height: 64px;
    object-fit: cover;
    border-radius: 6px;
    opacity: .75;
    cursor: pointer;
}

.article-gallery .thumbs img.active {
    opacity: 1;
    outline: 2px solid #555;
}

.article-meta {
    color: #666;
    margin: 6px 0 12px;
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
}

.btn--like {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 4px 10px;
    border-radius: 999px;
    line-height: 1;
    transition: background-color .15s ease, border-color .15s ease, opacity .15s ease;

    .icon {
        display: inline-block;
        width: 1em;
        height: 1em;
    }

    .like-label {
        font-size: .95rem;
    }
}

.btn--like[aria-pressed="true"] {
    background-color: #fdf2f2;
    border-color: #fecaca;
}

.btn--like:disabled {
    opacity: .6;
    cursor: not-allowed;
}

.btn--like:focus-visible {
    outline: 2px solid #2563eb;
    outline-offset: 2px;
}

.article-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.meta-left {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    color: #666;
}

.meta-right {
    display: flex;
    align-items: center;
}

.btn--like {
    padding: 4px 12px;
    border-radius: 999px;
}

.btn--like[aria-pressed="true"] {
    background-color: #f0f6ff;
    border-color: #1877F2;
    color: #1877F2;
}

.btn--like:disabled {
    opacity: .6;
    cursor: not-allowed;
}

.btn--like:focus-visible {
    outline: 2px solid #2563eb;
    outline-offset: 2px;
}

.image-preview img {
    width: 120px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
    margin: 4px
}

.existing-images img {
    width: 96px;
    height: 64px;
    object-fit: cover;
    border-radius: 6px;
    margin: 4px
}

/* ----- Formularz artykułu ----- */
.container {
    max-width: 960px;
    margin: 0 auto;
    padding: 16px;
}

.form {
    display: grid;
    gap: 14px;
    margin-top: 12px;
}

.form label {
    display: grid;
    gap: 6px;
    font-weight: 600;
    color: #374151;
}

.form input[type="text"],
.form textarea {
    border: 1px solid #d0d7de;
    border-radius: 10px;
    background: #fff;
    padding: 10px 12px;
    font: inherit;
    color: #111;
    transition: border-color .15s, box-shadow .15s;
}

.form textarea {
    resize: vertical;
    min-height: 180px;
}

.form input[type="text"]:focus,
.form textarea:focus {
    border-color: #1877F2;
    box-shadow: 0 0 0 3px rgba(24, 119, 242, .12);
    outline: none;
}

.form input[type="file"] {
    border: 1px dashed #cbd5e1;
    border-radius: 10px;
    padding: 10px;
    background: #fafafa;
}

.form .image-preview,
.form .existing-images .existing-grid {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

.form .ex-item {
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.form .form-error {
    color: #b91c1c;
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 10px;
    padding: 10px 12px;
}

.form .actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
}

/* breakpoints */
@media (max-width: 640px) {
    .form .actions {
        justify-content: stretch;
    }

    .form .actions .btn {
        flex: 1;
        justify-content: center;
    }
}

/* meta układ (po lewej info, po prawej przyciski) */
.article-meta {
    display: flex;
    align-items: center;
    gap: .75rem;
    flex-wrap: wrap;
}

.meta-left {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    color: #666;
}

.meta-right {
    margin-left: auto;
    display: flex;
    gap: 8px;
    align-items: center;
}

/* przycisk "Lubię to" (bez ikony) */
.btn--like {
    padding: 4px 12px;
    border-radius: 999px;
    line-height: 1;
    border: 1px solid #e5e7eb;
    background: #fff;
    transition: background-color .15s, border-color .15s, color .15s, opacity .15s;
}

.btn--like:hover {
    background: #f8fafc;
    border-color: #cbd5e1;
}

.btn--like:disabled {
    opacity: .6;
    cursor: not-allowed;
}

.btn--like:focus-visible {
    outline: 2px solid #2563eb;
    outline-offset: 2px;
}

.btn--like[aria-pressed="true"] {
    background: #f0f6ff;
    border-color: #1877F2;
    color: #1877F2;
}

.page-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
}

.page-title {
    margin: 0;
}

.page-header #newArticleTopBtn {
    margin-left: auto;
}

@media (max-width: 640px) {
    .page-header {
        flex-wrap: wrap;
    }

    .page-header #newArticleTopBtn {
        margin-left: 0;
    }
}

.btn--sm {
    padding: 4px 10px;
    font-size: .9rem;
    border-radius: 10px;
}

#backToListBtn {
    margin-bottom: 8px;
    display: inline-flex;
    align-items: center;
    gap: 6px;
}

/* === Filtry listy artykułów === */
.filters {
    display: flex;
    align-items: center;
    gap: 12px;
    margin: 12px 0 16px;

    >*:first-child {
        flex: 1;
    }
}

.filters input[type="search"],
.filters select {
    width: 100%;
    border: 1px solid #d0d7de;
    background: #fff;
    color: #111;
    border-radius: 10px;
    padding: 10px 12px;
    font: inherit;
    transition: border-color .15s ease, box-shadow .15s ease, background-color .15s ease;
}

.filters input[type="search"]::placeholder {
    color: #9aa0a6;
}

.filters input[type="search"]:focus,
.filters select:focus {
    outline: none;
    border-color: #1877F2;
    box-shadow: 0 0 0 3px rgba(24, 119, 242, .12);
}

/* Select – ładna strzałka */
.filters select {
    max-width: 220px;
    appearance: none;
    -webkit-appearance: none;
    background-image:
        linear-gradient(45deg, transparent 50%, #6b7280 50%),
        linear-gradient(135deg, #6b7280 50%, transparent 50%);
    background-position:
        calc(100% - 18px) 56%,
        calc(100% - 12px) 56%;
    background-size: 6px 6px, 6px 6px;
    background-repeat: no-repeat;
    padding-right: 32px;
}

/* Hover – delikatny */
.filters input[type="search"]:hover,
.filters select:hover {
    background-color: #fafbfc;
}

/* Mobile – układ w kolumnie */
@media (max-width: 640px) {
    .filters {
        flex-direction: column;
        align-items: stretch;
        gap: 10px;
    }

    .filters select {
        max-width: none;
    }
}

.btn--danger {
    color: #b91c1c;
    border: 1px solid #fecaca;
    background: #fff5f5;
    border-radius: 10px;
    padding: 6px 12px;
}

.btn--danger:hover {
    background: #fee2e2;
    border-color: #fca5a5;
}

.btn--danger:focus-visible {
    outline: 2px solid #ef4444;
    outline-offset: 2px;
}

.btn--danger:disabled {
    opacity: .6;
    cursor: not-allowed;
}

.search-box {
    margin-bottom: 1em;
    display: flex;
    justify-content: flex-start;

    input.input {
        padding: 0.5em 1em;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1rem;
        width: 100%;
        max-width: 300px;
    }
}
